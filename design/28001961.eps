%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: 6280.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Junkfood Anarchy
%%CreationDate: 1/15/2014
%%BoundingBox: 0 0 529 599
%%HiResBoundingBox: 0 0 528.2359 598.5401
%%CropBox: 0 0 528.2359 598.5401
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 116 128 8%%BeginData: 32700 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45CFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECF
%CECFAE8B858B858B858B858B858B858B858B858B858B858B858B858B858B
%858B858B858B858B858B858B858B858B85CFCECFCECFCECFCECFCECFCECF
%CECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFFFC9
%CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECEA78561
%856085618560856185608561856085618560856185608561856085618560
%8561856085618560856185608561CFC9CFCECEC9CFCECEC9CFCECEC9CFCE
%CEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCEFFCFCECFCECF
%CECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFAE85618B858B858B
%858B858B858B858B858B858B858B858B858B858B858B858B858B858B858B
%858B858B858B858B858B85CFCECFCECFCECFCECFCECFCECFCECFCECFCECF
%CECFCECFCECFCECFCECFCECFCECFCECFCECFCECFFFCECEC9CFCECEC9CFCE
%CEC9CFCECEC9CFCECEC9CFCECEC9CFCECEA7856085608561856085618560
%856185608561856085618560856185608561856085618560856185608561
%8560856185608560AEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9
%CFCECEC9CFCECEC9CFCECEC9CFCECEC9FFCFCECFCECFCECFCECFCECFCECF
%CECFCECFCECFCECFCECFCECFAE8B858B858B858B858B858B858B858B858B
%858B858B858B858B858B858B858B858B858B858B858B858B858B858B858B
%858B858B85CFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECF
%CECFCECFCECFCECFCECFCECFFFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCE
%CEC9CFCECEC9CEA885608561856085618560856185608561856085618560
%856185608561856085618560856185608561856085618560856185608561
%8560CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9
%CFCECEC9CFCECEC9FFCFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECF
%CECFA88B858B858B858B858B858B858B858B858B858B858B858B858B858B
%858B858B858B858B858B858B858B858B858B858B858B858B858B858561CF
%CECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECF
%CECFCECFFFC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CEA88560
%856185608561856085618560856185608561856085618560856185608561
%8560856185608561856085618560856185608561856085618560AECECEC9
%CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CECE
%FFCFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFAE8B858B858B858B
%858B858B858B858B858B858B858B858B858B858B858B858B858B858B858B
%858B858B858B858B858B858B858B858B858B858B858B85CFCECFCECFCECF
%CECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFFFC9CFCE
%CEC9CFCECEC9CFCECEC9CFCECEC9CFCECEA8856185608561856085618560
%856185608561856085618560856185608561856085618560856185608561
%8560856185608561856085618560856185608561AEC9CFCECEC9CFCECEC9
%CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCEFFCFCECFCECFCECF
%CECFCECFCECFCECFCECFCECFAE85618B858B858B858B858B858B858B858B
%858B858B858B858B858B858B858B858B858B858B858B858B858B858B858B
%858B858B858B858B858B858B8585858B85CFCECFCECFCECFCECFCECFCECF
%CECFCECFCECFCECFCECFCECFCECFCECFCECFFFCECEC9CFCECEC9CFCECEC9
%CFCECEC9CFCECEA785608560856185608561856085618560856185608561
%856085618560856185608561856085618560856185608561856085618560
%8561856085608560856085608560AEC9CECECEC9CFCECEC9CFCECEC9CFCE
%CEC9CFCECEC9CFCECEC9CFCECEC9FFCFCECFCECFCECFCECFCECFCECFCECF
%CECFA88B858B858B858B858B858B618B858B618B858B858B858B858B858B
%858B858B858B858B858B858B858B858B858B858B858B858B858B858B618B
%8584597D5259527D525959A7A7CFCECFCECFCECFCECFCECFCECFCECFCECF
%CECFCECFCECFCECFCECFFFCECEC9CFCECEC9CFCECEC9CFCECEC9CEA88560
%8561856085618560855A7E597E597E598460856085618560856185608561
%85608561856085618560856185608561856085618560856184522EF827F8
%27F827F827F827F8527DCEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCE
%CEC9CFCECEC9FFCFCECFCECFCECFCECFCECFCECFCECFA88B858B858B6185
%597D522EFD0427F8272727F827285959858585618B858B858B858B858B85
%8B858B858B858B8585858B858B858B85855A522727F8272727F8272727F8
%FD062752527D7DCFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFFFC9
%CFCECEC9CFCECEC9CFCECEC9CEA8856085608559532727F827F827F827F8
%27F827F827F827F827F85259856085618560856185608561856085618560
%8561856085618560852E27F827F827F827F827F827F827F827F827F827F8
%27F827F8527CCECECEC9CFCECEC9CFCECEC9CFCECEC9CECEFFCFCECFCECF
%CECFCECFCECFCECFAE8B858B85842E272727202727272027272720272727
%2027272720FD042784858B858B858B858B858B858B858B858B8584538B85
%8B6184272720272727202727272027272720272727202727272027272720
%27277DCECFCECFCECFCECFCECFCECFCECFCECFFFC9CFCECEC9CFCECEC9CF
%CECEA88561856059F827F827F827F827F827F827F827F827F827F827F827
%F827F827F8596185608561856085618560856185608553275A7E6059F827
%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827
%7CCFCECEC9CFCECEC9CFCECEC9CFCEFFCFCECFCECFCECFCECFCECFA88561
%8B8553F8272727F8272727F8272727F8272727F8272727F8272727F82727
%27F8598585858B858B858B858B858B8585842727522E522727F8272727F8
%272727F8272727F8272727F8272727F8272727F8272727517D522752CFCE
%CFCECFCECFCECFCECFCECFFFCECEC9CFCECEC9CFCECE848560856059F827
%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F87D
%6085608561856085618560856052F827F827F827F827F827F827F827F827
%F827F827F827F827F827F827F827F827F827F8277CCEC9A7A7CFCECEC9CF
%CECEC9CFCECEC9FFCFCECFCECFCECFCECFA88B858B618427272027272720
%272727202727272027272720272727202727272027272720272785618B85
%8B858B858B858B8585202727272027272720272727202727272027272720
%27272720272727202727272027272720277CCFCECFCECFCECFCECFCECFCE
%CFCECFFFCECEC9CFCECEC9CFA885608561852727F827F827F827F827F827
%F827F827F827F827F827F827F827F827F827F827F8272785608561856085
%618560855327F827F827F827F827F827F827F827F827F827F827F827F827
%F827F827F827F827F827F827F8277DCEC9CFCECEC9CFCECEC9CFCECEC9FF
%CFCECFCECFCECFA88B858B858B5927F8272727F8272727F8272727F82727
%27F8272727F8272727F8272727F8272727F8275285858B858B858B858561
%532727F8272727F8272727F8272727F8272727F8272727F8272727F82727
%27F8272727F82727527C52C9CFCECFCECFCECFCECFCECFCECFFFC9CFCECE
%C9CE8485608561856052F827F827F827F827F827F827F827F827F827F827
%F827F827F827F827F827F827F827F8275A8560856185608560852727F827
%F827F827F827F827F827F827F827F827F827F827F827F827F827F827F827
%F827F82727CE7CA7CECEC9CFCECEC9CFCECEC9CECEFFCFCECFCECFA88B85
%8B858B858527272027272720272727202727272027272720272727202727
%2720272E2E2027272720272759618B858B858B858B855227272027272720
%272727202727272027272720272727202727272027272720272727202727
%52A7CFCECFCECFCECFCECFCECFCECFCECFFFC9CFCECE8485618560856185
%5927F827F827F827F827F827F827F827F827F827F827F827F827F8272785
%5227F827F827F827278560856185608561855227F827F827F827F827F827
%F827F827F827F827F827F827F827F827F827F827F827F827F8525AA8C9CF
%CECEC9CFCECEC9CFCECEC9CFCEFFCFCECFA885858B858B858B617EF82727
%27F8272727F8272727F8272727F8272752FD0427F827528561852727F827
%2727F8278485858B858B858B617DF8272727F8272727F8272727F8272727
%F8272727F8272727F8272727F8272727F8272727288B61AFCECFCECFCECF
%CECFCECFCECFCECFFFCECE848561856085618560855927F827F827F827F8
%27F827F827F827F827F8595927F827F827528560856059F827F827F827F8
%8460856085618560855927F827F827F827F827F827F827F827F827F827F8
%27F827F827F827F827F827F827F827F852608560A8C9CECECEC9CFCECEC9
%CFCECEC9FFCF848B858B858B858B858B857E202727272027272720272752
%FD0527848427202727527E8B858B858B85522027272720277E8B858B858B
%858B8585FD04272027272720272727202727272027272720272727202727
%272027272720272727598B858B61AFCECFCECFCECFCECFCECFCECFFF8485
%608561856085618560855927F827F827F827F827F87D5927F82752855927
%F828528461856085618560855A27F827F827F88461856085618560856153
%F827F827F827F8272752525352522727F827F82727595984598459592E52
%F827F827F87E6085618560AFCECEC9CFCECEC9CFCECEC9FF8B858B858B85
%8B858B858B61842727F8272727F8285985602727525A8B7E535985858561
%8B858B858B858B858B7E27F8272752858B858B858B858B858B7E27F82727
%5259848485858B8585618B847D527D848B618B8585618B618561842727F8
%278485858B858B61AFCECFCECFCECFCECFCECFFF60856185608561856085
%6185602EF827F852527E6085605952846085608560856085618560856185
%6085618560855927F8275285608561856085618560852E27F82759616085
%608560856185608560856085608560856185608561855A27F82727856085
%6085618560AFCECEC9CFCECEC9CECEFF8B858B858B858B858B858B858B53
%27207E858B618B858B858B858B858B858B858B858B858B858B858B858B85
%8B858B53272784618B858B858B858B858B617E2027277E618B858B858B85
%8B858B858B858B858B858B858B858B858B858B27272053858B858B858B85
%8B61AFCECFCECFCECFCECFFF6085618560856185608561856084F8275985
%61856085618560856185608561856085618560856185608561856085617D
%F8526185608561856085618560855A27F827598560856185608561856085
%61856085618560856185608561856059F8275285618560856185608561A9
%C9CFCECEC9CFCEFF8B858B858B858B858B858B858561522784618B858B85
%8B858B858B858B858B858B858B858B858B858B858B858B858B5927598B85
%8B858B858B858B858B61852727F885858B858B858B858B858B858B858B85
%8B858B858B858B858B85855927277D618B858B858B858B858B61AFCECFCE
%CFCECFFF6185608561856085618560856085532760856085618560856185
%608561856085618560856185608561856085618560592785608561856085
%6185608561856052F8276085618560856185608561856085618560856185
%608561856085608527275985608561856085618560856085C9CECECEC9FF
%8B858B858B858B858B858B858B85855285858B858B618B858B618B858B85
%8B858B858B858B618B858B618B858B858B5984618B858B858B858B858B85
%8B858B5227538B858B858B858B858B858B858B858B858B858B858B858B85
%8B858B6184277E618B858B858B858B858B858B61AFCECFCECFFF61856085
%61856085618560856185608561855A845959537D597E6085618560856185
%60856084597D595959845A85608561856085618560856185608561856059
%F88560856185608561856085618560856185608561856085618560856185
%6052598560856185608561856085618560AFCECEC9FF8B858B858B858B85
%8B858B858B8585595327272752525352522827277D8485618B8459272828
%5252595252272E27525985858B858B858B858B858B858B85855984618585
%8584845A858585618B858B858B8585618B858584858485848B8585608585
%8B858B858B858B858B858B858B61AFCECFFF608561856085618560856185
%6084272727846085608560616085607D272728522727277D5A8560616085
%608560842827278460856085618560856185608560855A592E2EFD052728
%275259856085608560592E52FD0727525284608560856085618560856185
%608561856085C9FF8B858B858B858B858B858B858B84272085618B858B59
%595385858B618B27272027278B618B858552597D8B858B61852027848B85
%8B858B858B858B858B857E2727527D5A85858B858B847E5252277D597E53
%27277D7D85858B85858484595220527E8B858B858B858B858B858B858B85
%8B61AFFF608561856085618560856185608527275A8561855927F8272785
%6185602752842E27608560852727F827598560855A272785618560856185
%6085618560852E27528561856085597E608561856052F827F82753856085
%6184598461856085612EF8596185608561856085618560856185608585FF
%8B858B858B858B858B858B8585618B2784618B855352272727598B858427
%8561852785858559525227F852858561842785618B858B858B858B858B85
%856159277D618B858552272727608B858553275353F884618B61842727F8
%7D8585858B5227598B858B858B858B858B858B858B858B618BFF61856085
%618560856185608561856052538560852E27F827F87E608559526085612E
%5985607EF827F82728856185525260856085618560856185608561856052
%2E85608559522727F852608560522E856028538560852E52F827F8846085
%602E52856085618560856185608561856085618560FF8B858B858B858B85
%8B858B858B858B5952618B858427272759858B6152538B858B5252618B85
%5927272785858B6152598B858B858B858B858B858B858B858B7E52858B85
%7D27522727528B858B2784858B5359858B855228272027848B858B278561
%8B858B858B858B858B858B858B858B858BFF618560856185608561856085
%6185608527846085618559846185607D278460856184F87E618560845985
%6085617E278561856085618560856185608561856084278560856027F827
%F87E60855A275A85617E278561855227F827278561855952848560856185
%60856185608561856085618584FF8B858B858B858B858B858B858B858561
%7D2752537D597E597D525227846185858B857E27525259597E597D535327
%7D618B858B858B858B858B858B858B858561525985618B84595284618561
%525285858B8552528B618559595985618B6153528B858B858B858B858B85
%8B858B858B858B858BFF6085618560856185608561856085618560845352
%2E5228522E59598560855985608560855959525227FD0452846085608561
%856085618560856185608561855927537E5A8561855A7E53522785608560
%855A27287D5985608560845953F884608561856085618560856185608561
%85608585FF8B858B858B858B858B858B858B858B858B858B618B858B618B
%618B858B7E7E618B858B858B618B618B858B618B858B858B858B858B858B
%858B858B858B858B858B7E522752275227522E52598B85857E8B858B847D
%52522752272E27525284618B858B858B858B858B858B858B858B858B858B
%FF6085618560856185608561856085618560856185608561856085618560
%7E2784608561856085618560856185608561856085618560856185608561
%856085618560856185608560856085618560855985608561856085608560
%8560856085618560856185608561856085618560856185608585FF8B858B
%858B858B858B858B858B858B8585618B8585618B8585618B8585857E5985
%618B8585858B8585858B8585858B858B858B858B858B858B858B858B858B
%858B858B8585618B8585618B858585528485858B858B858B8585618B8585
%858B858B858B858B858B858B858B858B858B858B618BFF61856085618560
%856185608561856085608560856085608560856085608560856185608560
%856085608560856085608561856085618560856185608561856085618560
%856185608561856085618553525985608561856085618560856185608561
%856085618560856185608561856085618560FF8B858B858B858B858B858B
%858B858B855920FD0827522727275228FD0427522EFD0452535252538B85
%8B858B858B858B858B858B858B858B858B858B858B618B858B618B858B61
%8B858B618B618B618B618B618B858B618B858B858B858B858B858B858B85
%8B858B858B858BFF618560856185608561856085618560855227F827F827
%27595953F859535953275259537D27535327F827F827F82E608561856085
%6185608561856085618560855A5228535253525352525253525252595359
%5259535952595359597E597D608561856085618560856185608561856085
%618584FF8B858B858B858B858B858B858B858B617D2727F8272E85618B59
%52618B8485278B6185845284852E855227F8272785618B858B858B858B85
%8B858B858B858B61842727F8272727F8522E27202E275221272727282727
%52FD0427F8272784618B858B858B858B858B858B858B858B858B858BFF60
%8561856085618560856185608561855927F827F8846052F82727855952F8
%2760845227F88560855A52F827F82E608560856185608561856085618560
%8561855A27F827F82752856085F87E6085605353856185535360522859F8
%27F827598560856185608561856085618560856185608585FF8B858B858B
%858B858B858B858B858B618427272052857D59855927858553272085857E
%2027848B842727272027278B858B858B858B858B858B858B858B858B8585
%27272027528B845227277E8B5353207D857D5227538B7E8B7E2720272784
%618B858B858B858B858B858B858B858B858B858BFF608561856085618560
%856185608561855A27F82727855952607DF885595959275A85537D278461
%855927F827F852848560856185608561856085618560856185602EF827F8
%7E6153527D277D6084272753856052F85961855327F827F8275985608561
%85608561856085618560856185608585FF8B858B858B858B858B858B858B
%858B8584F8272727598B858427278485618B2784618B8552848B598553FD
%04278B858B858B858B858B858B858B858B858B8585FD04275A8552856127
%59855259275985595227528B6184F8272727F87E618B858B858B858B858B
%858B858B858B858B618BFF618560856185608561856085618560855A27F8
%27F8272752F827F8522727F82728522727F85252272727F827F827608561
%8560856185608561856085618560856052F827F85960846059F87E608560
%5952616061595360846084F827F827598561856085618560856185608561
%856085618560FF8B858B858B858B858B858B858B858B8585FD06522E5252
%5352522E5252522E52525228FD0452535252528B858B858B858B858B858B
%858B858B858B858B52272727207D7E7D2027527E597D2752597D53525285
%5252592727272084858B858B858B858B858B858B858B858B858B858BFF61
%856085618560856185608561856085618560856185608561856085618560
%856185608561856085618560856185608561856085618560856185608561
%8560856159F8272727F827F8272727F827F827F827F827F827F827F827F8
%27F827598561856085618560856185608561856085618584FF8B858B858B
%858B858B858B858B858B858B8585858B8585858B8585858B8585858B8585
%858B8585858B8585858B858B858B858B858B858B858B858B858B858B858B
%85858485858584858585848585855A8584845A8584845A8584845A858485
%858B858B858B858B858B858B858B858B858B858BFF608561856085618560
%856185608561856085618560856185608561856085618560856185608561
%856085618560856185608561856085618560856185608561856085608560
%856085608560856085608560856085608560856085608560856085608561
%85608561856085618560856185608585FF8B858B858B858B858B858B858B
%858B858B858B858B858B858B858B858B858B858B858B858B858B858B858B
%858B858B858B858B858B858B858B858B858B858B858B858B858B858B858B
%858B858B858B858B858B858B858B858B858B858B858B858B858B858B858B
%858B858B858B858B858B858BFF6085618560856185608561856085618560
%856185608561856085618560856185608561856085618560856185608561
%856085618560856185608561856085618560856185608561856085618560
%856185608561856085618560856185608561856085618560856185608561
%8560856185608585FF8B858B858B858B858B858B858B858B858B858B858B
%858B858B858B858B858B858B858B858B858B858B858B858B858B858B858B
%858B858B858B858B858B858B858B858B858B858B858B858B858B858B858B
%858B858B858B858B858B858B858B858B858B858B858B858B858B858B858B
%858B618BFF61856085618560856185608561856085618560856185608561
%856085618560856185608561856085618560856085608561856085618560
%856185608561856085618560856185608561856085618560856185608561
%856085618560856185608561856085618560856185608561856085618560
%FF8B858B858B858B858B858B858B858B858B858B858B858B858B858B858B
%858B858B858B858B858B858B61845285618B858B858B858B858B858B858B
%858B858B858B858B858B858B858B858B858B858B858B858B858B858B858B
%858B858B858B858B858B858B858B858B858B858B858B858B858BFF618560
%856185608561856085618560856185608561856085618560856185608561
%856085618560856185592727856085618560856185608561856085618560
%856185608561856085618560856185608560856085618560856185608561
%85608561856085618560856185608561856085618584FF8B858B858B858B
%858B858B858B858B858B858B858B858B858B858B858B858B858B858B858B
%858B858B6159F8272785618B858B858B858B858B858B858B858B858B858B
%858B858B858B8585618559532752275227525284848B858B858B858B858B
%858B858B858B858B858B858B858B858B858BFF6085618560856185608561
%856085618560856185608561856085618560856185608561856085618560
%852127F82752856085618560856185608561856085618560856185608561
%8560855A52F8272E59597E597D5252F82752856085608561856085618560
%8561856085618560856185608585FF8B858B858B858B858B858B858B858B
%858B858B858B858B858B858B858B858B858B858B858B858B618B52272027
%27275A8B858B858B858B858B858B858B858B858B858B858B858B618B5227
%5284858B618B858B618B858559522759858B858B858B858B858B858B858B
%858B858B858B858B858BFF60856185608561856085618560856185608561
%856085618560856185608561856085618560855A592727F827F827F85260
%8561856085618560856185608561856085618560856184F8525A85608561
%856085618560856185608427275A85618560856185608561856085618560
%856185608585FF8B858B858B858B858B858B858B858B858B858B858B858B
%858B858B8585618B85855A7E5352FD0427F8272727F8272784618B858B85
%8B858B858B858B858B858B858B858B61842759618B858B858B85855A8585
%8B858B8585618B5227598B858B858B858B858B858B858B858B858B858B61
%8BFF61856085618560856185608561856085618560856185608560856085
%5A592E52F827F827F827F827F827F827F827F82759856085618560856185
%608561856085618560856084F85960856085618560856185608561856085
%618560855227598560856085618560856185608561856085618560FF8B85
%8B858B858B858B858B858B858B858B858B858B858B85855A592727202727
%2720272727202727272027272720272752858B858B858B858B858B858B85
%8B858B858B8585277D618B8484858B858B858B858B8585858B858B858B85
%8B5327848B858B858B858B858B858B858B858B858B858BFF618560856185
%608561856085618560856185608561855A592727F827F827F827F827F827
%F827F827F827F827F827F827278460856185608561856085618560856185
%60852E5260856185608561845A85618560855A8560855A85608561852E52
%61856085618560856185608561856085618584FF8B858B858B858B858B85
%8B858B858B858B858561845227F8272727F8272727F8272727F8272727F8
%272727F8272727F8277E85858B858B858B858B858B858B858B8585592784
%85858B8585858B8585858B858B858B858B61858585618B8585277E618585
%8B858B858B858B858B858B858B858BFF6085618560856185608561856085
%618560855A52F827F827F827F827F827F827F827F827F827F827F827F827
%F827F827F87D60856085618560856185608561856085605259855A846085
%6185608560856085608560856185608560845A85607E2785608560856185
%6085618560856185608585FF8B858B858B858B858B858B858B858B618B53
%272027272720272759598459272027272720272727202727272027272720
%27538B858B858B858B858B858B858B858B85842E8B8585848B8584858B85
%8B848B8585848B858B8585858B8485858B85527E8B858B858B858B858B85
%8B858B858B858BFF608561856085618560856185608561842727F827F827
%27595A85618560855927F827F827287E5A7E59592727F827F827F8526185
%608561856085618560856185608552596085618560856085608561846085
%6085608561855A8561856085618559536185608561856085618560856185
%608585FF8B858B858B858B858B858B858B61852727F8272752598B618561
%8B858B618B5227F8275985618B8585618B7E7D53522727528B858B858B85
%8B858B858B858B8585845384858485858B858B858B858B858B858B858585
%8B8585858B8585858B85855285858B858B858B858B858B858B858B618BFF
%61856085618560856185608561855227F827278460856085618560856185
%6052F8275385608560856185608560852127F85260856185608561856085
%61856085607E528561855A85618560856185608561856085618560856185
%60845A85608560595A85618560856185608561856085618560FF8B858B85
%8B858B858B858B858B61592727598B858B858B858B858B858B6184272759
%8B858B858B858B858B858B53272727528B858B858B858B858B858B858B85
%8B5984858B858B858B858B858B858B858B858B858B858B858B858B84FD04
%858B5984858B858B858B858B858B858B858B858BFF618560856185608561
%85608561855227F85960856185608561856085618527525A856085618560
%85618560856153F827F852608561856085618560856185608561595A8561
%856085618560856185608561856085618560856185608561855A85618459
%85618560856185608561856085618584FF8B858B858B858B858B858B858B
%8559F8272785618B858B858B858B858B8484618B858B858B858B858B858B
%858B5927F8275385858B858B858B858B858B858B85855985858B858B858B
%858B858B858B858B858B858B858B858B858B858B8585858B8484618B858B
%858B858B858B858B858B858BFF84856185608561856085618560855327F8
%276085608561856085618560856085608561856085618560856185608527
%27F87D6085608561856085618560856185607E6085608561856085618560
%8561856085618560856185608561856085618560855A8560856185608561
%8560856185608585FFCF858B858B858B858B858B858B857E2027528B858B
%858B858B858B858B858B858B858B858B858B858B858B858B857D20277E8B
%858B858B858B858B858B858B858B848B858B858B858B858B858B858B858B
%858B858B858B858B858B858B858B858B8484858B858B858B858B858B858B
%858B858BFFC9CF8485608561856085618560855A27F88561856085618560
%8561856085618560856185608561856085618560856027F8856185608561
%856085618560856185608561856085618560856185608561856085618560
%856185608561856085618560856085608561856085618560856185608585
%FFCFCECF8585858B858B858B858B6185277D618B858B858B858B858B858B
%858B858B858B858B858B858B858B858B858B5927858B858B858B858B858B
%858B858B858561855959525352522E59537E848B6185618B61855A7D5252
%2E525253527D7E85618B858B858B858B858B858B858B858B618BFFCECEC9
%CF84856085618560856185607E6185608560856085608560856185608561
%856085608560856085608560856085598560856185608561856085618560
%855352F8522E59537D595952522727277E5A855A5927272859537D597D53
%52282727535985618560856185608561856085618560FFCFCECFCECF858B
%858B858B858B858B618B8484597D527D52595984858B618B858B618B8584
%597D5259527D5984848B618B858B858B858B858B858B858B858B7E272084
%858B618B618B618B858B8453FD05277E858B6185858B618B618B85532052
%858B858B858B858B858B858B858B858BFFCECEC9CFCECF84856185608561
%855A7D2827275252535259525227272E7E60856184522827522E59525352
%52272727595985608561856085618560856185607EF852608561855A52F8
%525A8561856027F827F85361856085532721596185608559272785618560
%856185608561856085618584FFCFCECFCECFCECF848B858B858B8552F852
%8485618B6185618B85855A592727275227525A858585618B6185618B857D
%F8275985858B858B858B858B858B858584522785618B855227272752858B
%8584F88485532E8B858559522727F87E618B617E277E618B858B858B858B
%858B858B858B858BFFC9CFCECEC9CFCECF84856185608527275985608560
%7D2752598560856052F827F827608560855A522759608560856027F87E60
%8560856185608561856085608560275A8560842852F827F8846085535260
%855A27608560592E52F8272E856185525960856085618560856185608561
%85608585FFCFCECFCECFCECFCECF858B858B857D2084858B618427272027
%7E8B858B5252847E2785618B855220272753858B85852752848B858B858B
%858B858B858B858B858B2E84618B855220272752858B8552538B85852784
%858B59272727207E858B8552598B858B858B858B858B858B858B858B858B
%FFC9CFCECEC9CFCECEC9CF8485608561525285618552592727F859618560
%285A856052598560842E52F827278560855A276085858560856185608561
%85608561856059526160855A52F8525A8560852184608561522E85618552
%2727596085618427856185608561856085618560856185608585FFCFCECF
%CECFCECFCECFCECF8585858B5952618B617DF8272727598B858427858585
%5259618584272727F852858561842885858B858B858B858B858B858B858B
%85855A275985858B6185618B858427598585858B842752FD04858B618585
%855252618B858B858B858B858B858B858B858561AFFFCECEC9CFCECEC9CF
%CECEC9CF84856084278560856052F8275285608552526085607E27856085
%5927F827598561612E596085608561856085618560856185608561855927
%27522E5352522727275960855A8560855A52272E28522E522E5227526085
%608561856085618560856185608560AEC9FFCFCECFCECFCECFCECFCECFCE
%CF848B8552538B85856185848B618B59277E8B858B85525285858B858561
%8B858B7E277E8B858B858B858B858B858B858B858B858B858B8584597E59
%7D5984848B618B847E618B858B61857E84597D597E5A85858B858B858B85
%8B858B858B858B858B85AFCECFFFCECEC9CFCECEC9CFCECEC9CFCECF8485
%5A27275252595259525227285985608561855A5227522E59535952532E27
%538561856085618560856185608561856085618560856185608561856085
%618560595961608561856085618560856185608561856085618560856185
%6085618560AECECEC9FFCFCECFCECFCECFCECFCECFCECFCECF848B858453
%595259527D5984858B857E848B85856185597D52595259527E8485858B85
%8B858B858B858B858B858B858B858B858B858B858B858B858B858B858559
%525985618B858B858B858B858B858B858B858B858B858B858B858B858B61
%AECECFCECFFFC9CFCECEC9CFCECEC9CFCECEC9CFCECE8485608560856085
%608560856084528560856185608560856085608560856185608561856085
%61856085618560856185608560856085608560856085608560855A846185
%60856085608560856085608560856185608561856085618560AECECEC9CE
%CEFFCFCECFCECFCECFCECFCECFCECFCECFCECF848B858B858B858B858B85
%8B84525985858B858B858B858B858B858B858B858B858B858B858B858B85
%8B858B858B858B85845984597E5A847E845A847E845A847E84848584857E
%85848584858485858B858B858B858B858B858B61FFCECFCECFCECFFFC9CF
%CECEC9CFCECEC9CFCECEC9CFCECEC9CF8485608561856085618560855A59
%5A8561856085618560856185608561856085618560856185608561856085
%618560852727F827F827F8272027F827F827F827F827F827F8272727F827
%F827F8596085618560856185608561AEC9CFCECEC9CFCEFFCFCECFCECFCE
%CFCECFCECFCECFCECFCECFA7CF84845A8584845A858485848B8585848585
%8584FD04858B8585858B858B858B858B858B858B858B858B858B85856152
%2727F8272759848B52525A858584278484855A278484F8522727F8275285
%858B858B858B858561CFCECFCECFCECFCECFFFCECEC9CFCECEC9CFCECEC9
%CFCECEC9CE7C27F827F827F827F827F827F827F827F827F8272727F85227
%28275227525A856185608561856085618560856185608561852E27F827F8
%7D608459272E61597D52526084595927855A7E6052F827F8536085608561
%85608560AEC9CFCECEC9CFCECEC9FFCFCECFCECFCECFCECFCECFCECFCECF
%CEA720272727205259845927597E5984525959847E525284272720FD0427
%85858B858B858B858B858B858B858B858B858B617D2727205285842E5227
%5361855227278B84592052858B855927272027528B858B858B858B85CFCE
%CFCECFCECFCECFCECFFFCECEC9CFCECEC9CFCECEC9CFCECEC9CFA727F827
%F82784855A59F885617E5A525A8559842E7D60596059F827F8275A856185
%608561856085618560856185608561855227F82752852E59605327855952
%F82860842E2727856184F827F827F85961856085618560CFCECEC9CFCECE
%C9CFCECEC9FFCFCECFCECFCECFCECFCECFCECFCECFCEC92727F8277DCF52
%27272784855927F884857D2027598561852827F8272785618B858B858B85
%8B858B858B858B858B858B617DF82727526184598527526184848427855A
%85845285858584FD0427528B858B858B85CFCECFCECFCECFCECFCECFCECF
%FFC9CFCECEC9CFCECEC9CFCECEC9CFCECEA727F827F8CE7C7C8484F88460
%7DF82759855927F87E60852727F827F8275A856085618560856185608561
%856085618560855927F827F8596085522727856084532760855A7E278559
%526052F827F8526085618560AECECEC9CFCECEC9CFCECEC9CECEFFCFCECF
%CECFCECFCECFCECFCECFCECFCECF27272027C9CF51CF7D277E8B59842784
%857E5A537E8B8585522720272784618B858B858B858B858B858B858B858B
%858B85842027272720272727202727272027272720FD0727202727272E8B
%858B85CFCECFCECFCECFCECFCECFCECFCECFFFC9CFCECEC9CFCECEC9CFCE
%CEC9CFCECEA752F827F87CCECEA727F88460856052538561852E84615960
%84F827F8275A85608561856085618560856185608561856085607D597E59
%7D597D597D597D597D597E597D59595359525953595359537E608561CFC9
%CFCECEC9CFCECEC9CFCECEC9CFCEFFCFCECFCECFCECFCECFCECFCECFCECF
%CECFFD0427F8275227F8272727F8FD0827592727F8272727F884858B858B
%858B858B858B858B858B858B858B858B6185618B6185618B6185618B6185
%618B6185618B6185618B6185618B858585CFCECFCECFCECFCECFCECFCECF
%CECFCECFFFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCE7D527D7C7D525252
%7CFD04522E595252525352522E535252525952535A856185608561856085
%618560856185608561856085618560856185608561856085618560856185
%6085618560856185608561CFC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9FF
%CFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFA8
%8B858B618B858B618B858B618B858B618B858B858B858B858B858B858B85
%8B858B858B858B858B858B858B858B858B858B858B858B858B858B858B85
%8B858B858B85CFCECFCECFCECFCECFCECFCECFCECFCECFCECFFFCECEC9CF
%CECEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECE84856185
%608561856085618560856185608561856085618560856185608561856085
%618560856185608561856085618560856185608561856085618560856185
%60CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9FFCFCECFCECFCECFCE
%CFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFA88B858B858B85
%8B858B858B858B858B858B858B858B858B858B858B858B858B858B858B85
%8B858B858B858B858B858B858B858B858B858B858B858B858B85CFCECFCE
%CFCECFCECFCECFCECFCECFCECFCECFCECFFFC9CFCECEC9CFCECEC9CFCECE
%C9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECE84856085608561856085
%618560856185608561856085618560856185608561856085618560856185
%608561856085618560856185608561856085618560CFCECEC9CFCECEC9CF
%CECEC9CFCECEC9CFCECEC9CECEFFCFCECFCECFCECFCECFCECFCECFCECFCE
%CFCECFCECFCECFCECFCECFCECFCECFCECFA88B858B858B858B858B858B85
%8B858B858B858B858B858B858B858B858B858B858B858B858B858B858B85
%8B858B858B858B858B858B858B858B85CFCECFCECFCECFCECFCECFCECFCE
%CFCECFCECFCECFCECFFFC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECE
%C9CFCECEC9CFCECEC9CFCECEC9CEA8856085618560856185608561856085
%618560856185608561856085618560856185608561856085618560856185
%6085618560856185608585CFC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CF
%CECEC9CFCEFFCFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCE
%CFCECFCECFCECFCECFCECFA885618B858B858B858B858B858B858B858B85
%8B858B858B858B858B858B858B858B858B858B858B858B858B858B858B85
%8B858B858585CFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCE
%CFFFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CF
%CECEC9CFCECEC9CEA8856085618560856185608561856085618560856185
%608561856085618560856185608561856085618560856185608561856085
%84CFC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9FFCFCE
%CFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCE
%CFCECFCECFA88B858B858B858B858B858B858B858B858B858B858B858B85
%8B858B858B858B858B858B858B858B858B858B858B858B858B85CFCECFCE
%CFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFFFCECEC9CFCECE
%C9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CF
%CECEA8856185608561856085618560856185608561856085618560856185
%608561856085618560856185608561856085618584CFCECEC9CFCECEC9CF
%CECEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9FFCFCECFCECFCECFCECFCE
%CFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFCECFA8
%8B858B858B858B858B858B858B858B858B858B858B858B858B858B858B85
%8B858B858B858B858B858B858B858B85CFCECFCECFCECFCECFCECFCECFCE
%CFCECFCECFCECFCECFCECFCECFCECFFFC9CFCECEC9CFCECEC9CFCECEC9CF
%CECEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECEA8856185
%608561856085618560856185608561856085618560856185608561856085
%6185608561856085618584CFCECEC9CFCECEC9CFCECEC9CFCECEC9CFCECE
%C9CFCECEC9CFCECEC9CECEFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2014-01-15T19:37:39+07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:ModifyDate>2014-01-15T19:37:39+07:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>228</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADkAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9MZyblOxV2KuxV2KuxVD&#xA;X9/DZwmSQ1Y7Ig6scy9Fop6ifDHl1Pc4+p1McMbLE7u7mupjLKak9B2A8BndabTQww4Y/wBryufP&#xA;LLLikoZkNLsVdirsVdirsVdirsVdirsVTjRtZMBFvcGsJ2Rz+z7H2zQdq9leJeTGPX1Hf+373b9n&#xA;9ocHon9PQ937GSAgio3BzkSKehdirsVdirsVdirsVdirsVRP/Hn/AJ/zZtv+Qn4/nNX8aGzUtrsV&#xA;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&#xA;iqJ/48/8/wCbNt/yE/H85q/jf//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2014-01-15T19:37:39+07:00</xmp:MetadataDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Corel PDF Engine Version 16.2.0.998</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">89</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>595.000000</stDim:w>
            <stDim:h>842.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DerivedFrom rdf:parseType="Resource"/>
         <xmpMM:DocumentID>xmp.did:CE0DECC3E17DE311BB7CA7BA79EA9043</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:CE0DECC3E17DE311BB7CA7BA79EA9043</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:CE0DECC3E17DE311BB7CA7BA79EA9043</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:CE0DECC3E17DE311BB7CA7BA79EA9043</stEvt:instanceID>
                  <stEvt:when>2014-01-15T19:37:39+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -598.54 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 598.54 li
528.236 598.54 li
528.236 0 li
cp
clp
0 598.54 mo
528.236 598.54 li
528.236 0 li
0 0 li
0 598.54 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 .4 0 cmyk
ef
0 140.156 mo
140.156 0 li
338.367 0 li
528.236 189.869 li
528.236 458.384 li
388.08 598.54 li
189.869 598.54 li
0 408.671 li
0 140.156 li
cp
.4 0 0 0 cmyk
ef
179.174 257.56 mo
181.472 256.297 183.883 254.396 186.404 251.856 cv
192.208 256.507 li
188.207 260.144 185.053 262.726 182.745 264.251 cv
185.871 267.153 189.199 270.174 192.727 273.31 cv
190.447 276.049 188.307 277.769 186.297 278.472 cv
184.217 276.555 181.863 274.229 179.246 271.489 cv
179.246 273.957 179.48 276.247 179.954 278.358 cv
175.953 278.556 172.738 278.32 170.306 277.656 cv
170.292 266.252 170.363 258.949 170.516 255.752 cv
170.669 252.556 170.761 250.558 170.797 249.761 cv
173.997 249.171 176.813 248.974 179.246 249.162 cv
179.413 250.441 179.388 253.239 179.174 257.56 cv
cp
166.748 249.343 mo
166.989 251.16 166.847 253.622 166.321 256.728 cv
161.929 256.815 158.021 257.11 154.601 257.608 cv
154.515 258.59 154.483 259.39 154.504 260.012 cv
158.444 259.739 160.596 259.652 160.966 259.746 cv
160.87 265.375 li
155.006 265.932 li
154.921 266.019 li
154.978 267.447 155.017 268.393 155.038 268.847 cv
155.194 268.895 li
156.187 268.869 157.424 268.74 158.911 268.506 cv
160.351 268.264 162.772 268.05 166.183 267.858 cv
166.698 270.152 166.904 272.924 166.797 276.186 cv
164.699 276.305 158.299 276.917 147.588 278.025 cv
147.617 277.468 147.631 275.826 147.631 273.099 cv
147.631 270.372 147.464 265.932 147.129 259.775 cv
147.108 259.351 147.08 258.285 147.048 256.585 cv
146.756 253.009 146.646 250.914 146.724 250.302 cv
154.121 250.043 160.795 249.722 166.748 249.343 cv
166.748 249.343 li
cp
143.069 249.343 mo
143.311 251.16 143.169 253.622 142.643 256.728 cv
138.251 256.815 134.343 257.11 130.922 257.608 cv
130.837 258.59 130.805 259.39 130.827 260.012 cv
134.767 259.739 136.917 259.652 137.288 259.746 cv
137.191 265.375 li
131.328 265.932 li
131.243 266.019 li
131.299 267.447 131.338 268.393 131.36 268.847 cv
131.516 268.895 li
132.508 268.869 133.746 268.74 135.232 268.506 cv
136.672 268.264 139.094 268.05 142.504 267.858 cv
143.02 270.152 143.226 272.924 143.119 276.186 cv
141.021 276.305 134.621 276.917 123.91 278.025 cv
123.938 277.468 123.953 275.826 123.953 273.099 cv
123.953 270.372 123.786 265.932 123.451 259.775 cv
123.43 259.351 123.401 258.285 123.369 256.585 cv
123.078 253.009 122.968 250.914 123.046 250.302 cv
130.442 250.043 137.117 249.722 143.069 249.343 cv
143.069 249.343 li
cp
119.05 249.771 mo
117.841 253.003 117.29 255.591 117.393 257.531 cv
113.873 256.964 111.116 257.087 109.132 257.903 cv
107.013 258.881 105.495 260.348 104.577 262.305 cv
102.995 267.36 103.546 270.229 106.234 270.919 cv
108.499 271.178 110.135 270.045 111.141 267.512 cv
110.608 267.412 108.948 267.49 106.163 267.742 cv
106.163 262.58 li
106.163 262.395 107.792 262.262 111.053 262.175 cv
114.313 262.091 116.753 261.987 118.371 261.867 cv
118.42 269.611 115.868 274.748 110.715 277.277 cv
104.549 278.997 99.9116 277.436 96.8071 272.59 cv
94.8691 268.238 95.3706 263.062 98.3076 257.067 cv
98.834 256.041 99.478 255.121 100.235 254.305 cv
104.762 249.884 111.035 248.372 119.05 249.771 cv
119.05 249.771 li
cp
75.4258 243.272 mo
78.3979 283.472 li
211.026 284.072 li
210.284 244.772 li
75.4258 243.272 li
75.4258 243.272 li
cp
0 0 0 1 cmyk
ef
98.3726 195.444 mo
96.5728 195.444 95.1143 196.897 95.1143 198.688 cv
95.1143 200.48 96.5728 201.932 98.3726 201.932 cv
100.173 201.932 101.632 200.48 101.632 198.688 cv
101.632 196.897 100.173 195.444 98.3726 195.444 cv
cp
104.574 188.851 mo
110.934 188.851 116.089 193.981 116.089 200.312 cv
116.089 206.641 110.934 211.771 104.574 211.771 cv
98.2153 211.771 93.0601 206.641 93.0601 200.312 cv
93.0601 193.981 98.2153 188.851 104.574 188.851 cv
104.574 188.851 li
cp
ef
178.725 195.444 mo
176.924 195.444 175.465 196.897 175.465 198.688 cv
175.465 200.48 176.924 201.932 178.725 201.932 cv
180.524 201.932 181.983 200.48 181.983 198.688 cv
181.983 196.897 180.524 195.444 178.725 195.444 cv
cp
184.926 188.851 mo
191.285 188.851 196.44 193.981 196.44 200.312 cv
196.44 206.641 191.285 211.771 184.926 211.771 cv
178.566 211.771 173.412 206.641 173.412 200.312 cv
173.412 193.981 178.566 188.851 184.926 188.851 cv
184.926 188.851 li
cp
ef
141.965 218.63 mo
141.965 218.63 134.854 229.188 137.657 233.522 cv
140.461 237.856 149.849 235.49 149.849 235.49 cv
149.849 235.49 140.875 233.287 139.836 230.086 cv
138.796 226.885 141.965 218.63 141.965 218.63 cv
cp
ef
124.303 182.886 mo
119.139 181.505 112.059 180.284 103.251 180.34 cv
93.2813 180.404 85.5576 181.709 80.2637 182.839 cv
73.5601 184.271 72.9146 187.676 74.4126 198.917 cv
75.3838 206.202 77.2529 213.731 80.8462 215.777 cv
85.0049 218.144 96.521 219.005 107.335 218.345 cv
116.867 217.764 125.626 216.073 127.777 213.292 cv
128.863 211.888 130.005 209.712 130.978 207.169 cv
132.642 202.816 133.601 197.122 133.979 192.416 cv
134.444 186.626 132.789 185.157 124.303 182.886 cv
cp
165.169 182.886 mo
156.684 185.157 155.028 186.626 155.494 192.416 cv
155.872 197.122 156.83 202.816 158.494 207.169 cv
159.467 209.712 160.608 211.888 161.695 213.292 cv
163.846 216.073 172.605 217.764 182.137 218.345 cv
192.951 219.005 204.467 218.144 208.625 215.777 cv
212.219 213.731 214.088 206.202 215.06 198.917 cv
216.557 187.676 215.912 184.271 209.208 182.839 cv
203.914 181.709 196.191 180.404 186.221 180.34 cv
177.413 180.284 170.333 181.505 165.169 182.886 cv
165.169 182.886 li
cp
225.334 183.029 mo
225.334 193.903 li
221.738 195.963 219.641 195.885 219.067 199.751 cv
217.847 207.964 215.44 216.73 210.699 219.43 cv
205.859 222.185 193.376 223.243 181.89 222.542 cv
171.311 221.896 161.337 219.693 158.371 215.859 cv
157.033 214.128 155.673 211.573 154.562 208.667 cv
153.542 205.999 152.708 202.995 152.269 200.027 cv
150.746 189.729 138.726 189.729 137.203 200.027 cv
136.764 202.995 135.93 205.999 134.91 208.667 cv
133.798 211.573 132.439 214.128 131.101 215.859 cv
128.134 219.693 118.161 221.896 107.583 222.542 cv
96.0957 223.243 83.6128 222.185 78.7734 219.43 cv
74.0317 216.73 71.6255 207.964 70.4053 199.751 cv
69.8315 195.885 67.7339 195.963 64.1377 193.903 cv
64.1377 183.029 li
67.0879 182.286 69.5986 181.663 72.458 180.683 cv
76.665 179.242 87.2998 176.246 103.234 176.145 cv
113.1 176.081 124.866 177.65 134.242 181.949 cv
140.243 184.698 149.229 184.698 155.229 181.949 cv
164.606 177.65 176.372 176.081 186.238 176.145 cv
202.172 176.246 212.807 179.242 217.014 180.683 cv
219.874 181.663 222.384 182.286 225.334 183.029 cv
225.334 183.029 li
cp
ef
192.804 112.756 mo
192.804 112.756 196.357 125.269 204.56 135.184 cv
212.762 145.099 218.776 151.269 218.776 151.269 cv
218.502 173.75 li
218.502 173.75 234.086 153.622 235.18 132.316 cv
236.273 111.01 219.87 95.3105 219.87 95.3105 cv
219.87 95.3105 213.035 74.8848 174.76 66.9375 cv
136.486 58.9902 90.2832 68.4463 73.333 88.7573 cv
56.3823 109.068 57.2026 128.833 59.3901 141.757 cv
61.5771 154.683 71.9658 175.458 71.9658 175.458 cv
75.2456 149.406 li
75.2456 149.406 84.5405 148.573 96.5703 143.471 cv
108.6 138.37 117.895 132.028 117.895 132.028 cv
117.895 132.028 115.845 137.007 111.333 141.904 cv
106.822 146.801 104.635 148.103 104.635 148.103 cv
104.635 148.103 117.622 146.936 130.061 138.864 cv
142.5 130.793 155.212 120.781 155.212 120.781 cv
155.212 120.781 152.206 127.909 146.328 133.677 cv
140.45 139.445 134.025 143.818 134.025 143.818 cv
134.025 143.818 155.076 141.316 170.933 132.328 cv
186.789 123.339 192.804 112.527 192.804 112.756 cv
cp
ef
401.695 263.738 mo
403.992 262.475 406.403 260.573 408.924 258.034 cv
414.728 262.685 li
410.727 266.322 407.574 268.903 405.265 270.429 cv
408.391 273.331 411.719 276.352 415.247 279.487 cv
412.967 282.227 410.827 283.947 408.818 284.65 cv
406.738 282.732 404.383 280.407 401.766 277.667 cv
401.766 280.135 402 282.425 402.474 284.536 cv
398.473 284.734 395.258 284.498 392.827 283.833 cv
392.812 272.43 392.883 265.127 393.037 261.93 cv
393.189 258.734 393.282 256.735 393.317 255.939 cv
396.517 255.35 399.333 255.152 401.766 255.34 cv
401.933 256.619 401.909 259.417 401.695 263.738 cv
cp
389.268 255.521 mo
389.509 257.338 389.368 259.799 388.841 262.905 cv
384.45 262.993 380.542 263.288 377.121 263.786 cv
377.036 264.768 377.003 265.567 377.025 266.189 cv
380.964 265.917 383.116 265.83 383.486 265.924 cv
383.39 271.553 li
377.526 272.109 li
377.441 272.197 li
377.498 273.625 377.537 274.571 377.558 275.024 cv
377.714 275.073 li
378.707 275.047 379.944 274.917 381.431 274.684 cv
382.871 274.441 385.292 274.228 388.703 274.037 cv
389.218 276.33 389.424 279.102 389.318 282.363 cv
387.219 282.483 380.819 283.095 370.108 284.203 cv
370.137 283.646 370.151 282.004 370.151 279.277 cv
370.151 276.55 369.984 272.109 369.65 265.953 cv
369.628 265.529 369.6 264.463 369.568 262.763 cv
369.276 259.188 369.167 257.092 369.245 256.48 cv
376.641 256.221 383.315 255.9 389.268 255.521 cv
389.268 255.521 li
cp
365.589 255.521 mo
365.832 257.338 365.689 259.799 365.163 262.905 cv
360.772 262.993 356.863 263.288 353.443 263.786 cv
353.357 264.768 353.325 265.567 353.347 266.189 cv
357.287 265.917 359.438 265.83 359.808 265.924 cv
359.711 271.553 li
353.848 272.109 li
353.763 272.197 li
353.819 273.625 353.859 274.571 353.88 275.024 cv
354.037 275.073 li
355.029 275.047 356.266 274.917 357.752 274.684 cv
359.193 274.441 361.615 274.228 365.024 274.037 cv
365.54 276.33 365.747 279.102 365.639 282.363 cv
363.542 282.483 357.141 283.095 346.43 284.203 cv
346.458 283.646 346.473 282.004 346.473 279.277 cv
346.473 276.55 346.306 272.109 345.971 265.953 cv
345.95 265.529 345.921 264.463 345.89 262.763 cv
345.598 259.188 345.488 257.092 345.566 256.48 cv
352.962 256.221 359.637 255.9 365.589 255.521 cv
365.589 255.521 li
cp
341.57 255.949 mo
340.361 259.181 339.81 261.769 339.914 263.708 cv
336.393 263.142 333.636 263.265 331.653 264.081 cv
329.534 265.059 328.015 266.526 327.097 268.482 cv
325.515 273.538 326.066 276.407 328.754 277.097 cv
331.019 277.356 332.656 276.223 333.662 273.69 cv
333.128 273.59 331.468 273.667 328.683 273.92 cv
328.683 268.758 li
328.683 268.573 330.312 268.44 333.573 268.353 cv
336.833 268.269 339.273 268.165 340.891 268.045 cv
340.941 275.789 338.388 280.925 333.235 283.455 cv
327.069 285.174 322.432 283.613 319.328 278.769 cv
317.389 274.416 317.891 269.24 320.828 263.245 cv
321.354 262.219 321.999 261.299 322.755 260.482 cv
327.282 256.062 333.555 254.549 341.57 255.949 cv
341.57 255.949 li
cp
297.946 249.45 mo
300.918 289.65 li
433.546 290.25 li
432.804 250.95 li
297.946 249.45 li
297.946 249.45 li
cp
ef
320.892 201.622 mo
319.093 201.622 317.634 203.075 317.634 204.866 cv
317.634 206.658 319.093 208.11 320.892 208.11 cv
322.693 208.11 324.152 206.658 324.152 204.866 cv
324.152 203.075 322.693 201.622 320.892 201.622 cv
cp
327.094 195.029 mo
333.454 195.029 338.61 200.16 338.61 206.489 cv
338.61 212.819 333.454 217.949 327.094 217.949 cv
320.736 217.949 315.581 212.819 315.581 206.489 cv
315.581 200.16 320.736 195.029 327.094 195.029 cv
327.094 195.029 li
cp
ef
401.245 201.622 mo
399.444 201.622 397.986 203.075 397.986 204.866 cv
397.986 206.658 399.444 208.11 401.245 208.11 cv
403.044 208.11 404.503 206.658 404.503 204.866 cv
404.503 203.075 403.044 201.622 401.245 201.622 cv
cp
407.447 195.029 mo
413.805 195.029 418.96 200.16 418.96 206.489 cv
418.96 212.819 413.805 217.949 407.447 217.949 cv
401.086 217.949 395.932 212.819 395.932 206.489 cv
395.932 200.16 401.086 195.029 407.447 195.029 cv
407.447 195.029 li
cp
ef
364.485 224.808 mo
364.485 224.808 357.374 235.365 360.177 239.7 cv
362.981 244.034 372.37 241.668 372.37 241.668 cv
372.37 241.668 363.395 239.465 362.356 236.264 cv
361.317 233.063 364.485 224.808 364.485 224.808 cv
cp
ef
346.824 189.064 mo
341.659 187.683 334.579 186.462 325.771 186.518 cv
315.801 186.582 308.078 187.887 302.784 189.017 cv
296.081 190.449 295.435 193.854 296.933 205.095 cv
297.904 212.379 299.773 219.909 303.367 221.955 cv
307.525 224.322 319.041 225.183 329.855 224.523 cv
339.386 223.942 348.147 222.25 350.297 219.469 cv
351.383 218.065 352.525 215.89 353.498 213.347 cv
355.163 208.994 356.121 203.3 356.499 198.593 cv
356.964 192.804 355.308 191.334 346.824 189.064 cv
cp
387.689 189.064 mo
379.204 191.334 377.548 192.804 378.014 198.593 cv
378.392 203.3 379.35 208.994 381.014 213.347 cv
381.987 215.89 383.128 218.065 384.215 219.469 cv
386.366 222.25 395.125 223.942 404.658 224.523 cv
415.471 225.183 426.988 224.322 431.146 221.955 cv
434.74 219.909 436.608 212.379 437.58 205.095 cv
439.078 193.854 438.432 190.449 431.729 189.017 cv
426.434 187.887 418.711 186.582 408.742 186.518 cv
399.933 186.462 392.853 187.683 387.689 189.064 cv
387.689 189.064 li
cp
447.855 189.207 mo
447.855 200.081 li
444.258 202.141 442.161 202.063 441.587 205.929 cv
440.367 214.142 437.96 222.908 433.219 225.607 cv
428.379 228.362 415.897 229.42 404.41 228.719 cv
393.832 228.074 383.858 225.871 380.891 222.037 cv
379.553 220.306 378.194 217.75 377.083 214.845 cv
376.062 212.177 375.228 209.173 374.79 206.205 cv
373.266 195.907 361.247 195.907 359.723 206.205 cv
359.285 209.173 358.451 212.177 357.43 214.845 cv
356.319 217.75 354.959 220.306 353.621 222.037 cv
350.655 225.871 340.681 228.074 330.103 228.719 cv
318.616 229.42 306.133 228.362 301.293 225.607 cv
296.552 222.908 294.146 214.142 292.925 205.929 cv
292.352 202.063 290.254 202.141 286.658 200.081 cv
286.658 189.207 li
289.608 188.463 292.119 187.841 294.978 186.861 cv
299.185 185.42 309.82 182.424 325.754 182.322 cv
335.621 182.259 347.386 183.828 356.762 188.127 cv
362.763 190.876 371.75 190.876 377.75 188.127 cv
387.126 183.828 398.892 182.259 408.758 182.322 cv
424.692 182.424 435.327 185.42 439.535 186.861 cv
442.394 187.841 444.904 188.463 447.855 189.207 cv
447.855 189.207 li
cp
ef
292.473 181.194 mo
292.473 181.194 290.679 155.762 285.522 145.006 cv
280.365 134.251 274.134 113.564 278.45 100.715 cv
282.766 87.8652 286.397 86.3828 288.353 80.7739 cv
290.308 75.1655 290.252 74.4717 290.252 74.4717 cv
290.252 74.4717 294.305 80.6797 295.369 84.7061 cv
295.896 86.7075 296.224 88.4849 296.42 89.7671 cv
297.263 88.3252 298.392 86.3394 299.669 83.9502 cv
302.42 78.8037 302.788 77.5859 302.788 77.5859 cv
302.788 77.5859 302.484 85.3286 301.795 88.3271 cv
301.736 88.5845 301.679 88.8442 301.625 89.1035 cv
311.94 81.1934 333.382 58.9512 369.083 58.0396 cv
399.827 57.2549 407.056 62.166 407.056 62.166 cv
395.481 64.7773 li
395.481 64.7773 418.346 64.3101 440.14 72.0923 cv
461.933 79.8745 470.003 90.207 470.003 90.207 cv
470.003 90.207 457.331 86.708 450.796 86.2383 cv
444.262 85.7686 444.262 85.7686 444.262 85.7686 cv
444.262 85.7686 453.445 89.9917 459.388 98.8735 cv
465.332 107.755 466.412 112.823 466.412 112.823 cv
466.412 112.823 461.085 106.589 457.422 104.367 cv
453.759 102.144 452.768 101.475 452.768 101.475 cv
454.797 108.987 455.204 111.735 455.273 119.383 cv
450.914 111.135 li
449.597 123.088 448.449 130.798 446.069 142.611 cv
443.58 154.971 442.818 164.365 441.791 180.851 cv
441.791 180.851 433.941 169.934 430.406 159.369 cv
426.872 148.805 426.769 140.932 426.769 140.932 cv
426.769 140.932 400.204 133.734 386.297 137.333 cv
372.391 140.93 365.647 143.65 365.647 143.65 cv
365.647 143.65 350.824 135.921 327.772 139.058 cv
304.72 142.194 304.908 144.506 304.908 144.506 cv
304.908 144.506 306.21 153.968 302.622 165.873 cv
299.032 177.777 292.473 181.194 292.473 181.194 cv
cp
ef
327.14 441.748 mo
325.34 441.748 323.882 443.201 323.882 444.992 cv
323.882 446.784 325.34 448.236 327.14 448.236 cv
328.941 448.236 330.4 446.784 330.4 444.992 cv
330.4 443.201 328.941 441.748 327.14 441.748 cv
cp
333.341 435.155 mo
339.702 435.155 344.857 440.285 344.857 446.615 cv
344.857 452.945 339.702 458.075 333.341 458.075 cv
326.983 458.075 321.828 452.945 321.828 446.615 cv
321.828 440.285 326.983 435.155 333.341 435.155 cv
333.341 435.155 li
cp
ef
407.492 441.748 mo
405.692 441.748 404.233 443.201 404.233 444.992 cv
404.233 446.784 405.692 448.236 407.492 448.236 cv
409.292 448.236 410.75 446.784 410.75 444.992 cv
410.75 443.201 409.292 441.748 407.492 441.748 cv
cp
413.694 435.155 mo
420.053 435.155 425.208 440.285 425.208 446.615 cv
425.208 452.945 420.053 458.075 413.694 458.075 cv
407.334 458.075 402.18 452.945 402.18 446.615 cv
402.18 440.285 407.334 435.155 413.694 435.155 cv
413.694 435.155 li
cp
ef
370.733 464.935 mo
370.733 464.935 363.622 475.491 366.425 479.826 cv
369.229 484.16 378.617 481.794 378.617 481.794 cv
378.617 481.794 369.643 479.591 368.604 476.391 cv
367.564 473.189 370.733 464.935 370.733 464.935 cv
cp
ef
353.071 429.189 mo
347.907 427.809 340.827 426.588 332.019 426.645 cv
322.049 426.708 314.326 428.013 309.032 429.144 cv
302.328 430.575 301.682 433.979 303.18 445.222 cv
304.152 452.506 306.021 460.035 309.614 462.081 cv
313.773 464.448 325.289 465.309 336.103 464.649 cv
345.634 464.068 354.394 462.377 356.545 459.596 cv
357.631 458.191 358.773 456.017 359.746 453.474 cv
361.41 449.12 362.369 443.426 362.747 438.72 cv
363.211 432.93 361.556 431.461 353.071 429.189 cv
cp
393.937 429.189 mo
385.452 431.461 383.795 432.93 384.261 438.72 cv
384.639 443.426 385.597 449.12 387.262 453.474 cv
388.235 456.017 389.376 458.191 390.462 459.596 cv
392.614 462.377 401.374 464.068 410.905 464.649 cv
421.719 465.309 433.235 464.448 437.393 462.081 cv
440.987 460.035 442.856 452.506 443.828 445.222 cv
445.325 433.979 444.68 430.575 437.976 429.144 cv
432.682 428.013 424.958 426.708 414.99 426.645 cv
406.181 426.588 399.101 427.809 393.937 429.189 cv
393.937 429.189 li
cp
454.102 429.333 mo
454.102 440.207 li
450.505 442.267 448.409 442.189 447.834 446.056 cv
446.615 454.269 444.208 463.034 439.466 465.733 cv
434.627 468.488 422.144 469.547 410.658 468.846 cv
400.079 468.2 390.105 465.997 387.139 462.163 cv
385.8 460.433 384.441 457.877 383.33 454.971 cv
382.31 452.303 381.475 449.299 381.037 446.331 cv
379.513 436.033 367.494 436.033 365.971 446.331 cv
365.532 449.299 364.698 452.303 363.677 454.971 cv
362.567 457.877 361.207 460.433 359.869 462.163 cv
356.902 465.997 346.928 468.2 336.35 468.846 cv
324.864 469.547 312.38 468.488 307.542 465.733 cv
302.799 463.034 300.393 454.269 299.173 446.056 cv
298.599 442.189 296.501 442.267 292.906 440.207 cv
292.906 429.333 li
295.856 428.59 298.367 427.967 301.226 426.987 cv
305.433 425.546 316.068 422.55 332.001 422.448 cv
341.869 422.385 353.633 423.954 363.01 428.254 cv
369.01 431.002 377.998 431.002 383.998 428.254 cv
393.375 423.954 405.14 422.385 415.006 422.448 cv
430.94 422.55 441.575 425.546 445.782 426.987 cv
448.641 427.967 451.152 428.59 454.102 429.333 cv
454.102 429.333 li
cp
ef
299.25 417.24 mo
304.72 287.09 464.205 309.573 450.954 419.132 cv
455.245 319.419 317.014 290.157 299.25 417.24 cv
cp
ef
323.288 389.325 mo
323.98 389.325 324.545 388.803 324.545 388.161 cv
324.545 387.521 323.98 386.998 323.288 386.998 cv
322.595 386.998 322.03 387.521 322.03 388.161 cv
322.03 388.803 322.595 389.325 323.288 389.325 cv
cp
ef
325.3 374.624 mo
326.132 374.624 326.81 374.02 326.81 373.277 cv
326.81 372.535 326.132 371.93 325.3 371.93 cv
324.469 371.93 323.792 372.535 323.792 373.277 cv
323.792 374.02 324.469 374.624 325.3 374.624 cv
cp
ef
342.096 378.055 mo
342.893 378.055 343.543 377.477 343.543 376.768 cv
343.543 376.06 342.893 375.482 342.096 375.482 cv
341.299 375.482 340.65 376.06 340.65 376.768 cv
340.65 377.477 341.299 378.055 342.096 378.055 cv
cp
ef
341.467 358.943 mo
342.264 358.943 342.915 358.338 342.915 357.596 cv
342.915 356.854 342.264 356.248 341.467 356.248 cv
340.67 356.248 340.021 356.854 340.021 357.596 cv
340.021 358.338 340.67 358.943 341.467 358.943 cv
cp
ef
407.96 365.805 mo
408.653 365.805 409.218 365.199 409.218 364.457 cv
409.218 363.715 408.653 363.109 407.96 363.109 cv
407.267 363.109 406.703 363.715 406.703 364.457 cv
406.703 365.199 407.267 365.805 407.96 365.805 cv
cp
ef
422.932 374.87 mo
423.555 374.87 424.064 374.265 424.064 373.521 cv
424.064 372.779 423.555 372.174 422.932 372.174 cv
422.308 372.174 421.799 372.779 421.799 373.521 cv
421.799 374.265 422.308 374.87 422.932 374.87 cv
cp
ef
407.708 380.995 mo
408.402 380.995 408.966 380.39 408.966 379.647 cv
408.966 378.905 408.402 378.3 407.708 378.3 cv
407.015 378.3 406.451 378.905 406.451 379.647 cv
406.451 380.39 407.015 380.995 407.708 380.995 cv
cp
ef
422.806 394.226 mo
423.499 394.226 424.064 393.511 424.064 392.633 cv
424.064 391.756 423.499 391.04 422.806 391.04 cv
422.113 391.04 421.548 391.756 421.548 392.633 cv
421.548 393.511 422.113 394.226 422.806 394.226 cv
cp
ef
435.765 400.351 mo
436.527 400.351 437.149 399.745 437.149 399.003 cv
437.149 398.261 436.527 397.656 435.765 397.656 cv
435.002 397.656 434.38 398.261 434.38 399.003 cv
434.38 399.745 435.002 400.351 435.765 400.351 cv
cp
ef
376.507 349.879 mo
377.201 349.879 377.765 349.273 377.765 348.531 cv
377.765 347.788 377.201 347.184 376.507 347.184 cv
375.814 347.184 375.25 347.788 375.25 348.531 cv
375.25 349.273 375.814 349.879 376.507 349.879 cv
cp
ef
359.397 364.824 mo
360.089 364.824 360.655 364.219 360.655 363.477 cv
360.655 362.734 360.089 362.129 359.397 362.129 cv
358.705 362.129 358.139 362.734 358.139 363.477 cv
358.139 364.219 358.705 364.824 359.397 364.824 cv
cp
ef
387.328 363.354 mo
388.02 363.354 388.585 362.748 388.585 362.006 cv
388.585 361.264 388.02 360.658 387.328 360.658 cv
386.635 360.658 386.07 361.264 386.07 362.006 cv
386.07 362.748 386.635 363.354 387.328 363.354 cv
cp
ef
381.541 379.034 mo
382.233 379.034 382.798 378.429 382.798 377.687 cv
382.798 376.943 382.233 376.339 381.541 376.339 cv
380.847 376.339 380.283 376.943 380.283 377.687 cv
380.283 378.429 380.847 379.034 381.541 379.034 cv
cp
ef
365.436 381.975 mo
366.129 381.975 366.695 381.369 366.695 380.626 cv
366.695 379.884 366.129 379.278 365.436 379.278 cv
364.744 379.278 364.178 379.884 364.178 380.626 cv
364.178 381.369 364.744 381.975 365.436 381.975 cv
cp
ef
407.942 503.864 mo
410.24 502.601 412.651 500.699 415.171 498.16 cv
420.975 502.812 li
416.975 506.448 413.821 509.029 411.512 510.555 cv
414.638 513.457 417.966 516.479 421.495 519.613 cv
419.215 522.354 417.075 524.073 415.065 524.776 cv
412.985 522.858 410.631 520.533 408.014 517.793 cv
408.014 520.262 408.249 522.551 408.721 524.662 cv
404.721 524.86 401.506 524.624 399.074 523.96 cv
399.06 512.557 399.13 505.253 399.284 502.057 cv
399.437 498.86 399.529 496.861 399.565 496.065 cv
402.765 495.476 405.582 495.278 408.014 495.466 cv
408.181 496.745 408.156 499.543 407.942 503.864 cv
cp
395.515 495.647 mo
395.757 497.464 395.615 499.926 395.088 503.031 cv
390.697 503.119 386.789 503.414 383.369 503.912 cv
383.283 504.894 383.25 505.693 383.272 506.315 cv
387.212 506.043 389.364 505.956 389.734 506.05 cv
389.637 511.679 li
383.774 512.235 li
383.689 512.323 li
383.746 513.751 383.785 514.697 383.806 515.15 cv
383.962 515.199 li
384.955 515.174 386.192 515.044 387.678 514.811 cv
389.119 514.567 391.54 514.354 394.951 514.163 cv
395.465 516.456 395.672 519.228 395.565 522.489 cv
393.467 522.609 387.067 523.222 376.356 524.329 cv
376.384 523.771 376.399 522.13 376.399 519.403 cv
376.399 516.676 376.232 512.235 375.897 506.079 cv
375.876 505.655 375.847 504.59 375.816 502.889 cv
375.524 499.313 375.414 497.218 375.492 496.606 cv
382.888 496.347 389.563 496.026 395.515 495.647 cv
395.515 495.647 li
cp
371.837 495.647 mo
372.079 497.464 371.937 499.926 371.411 503.031 cv
367.019 503.119 363.111 503.414 359.69 503.912 cv
359.605 504.894 359.573 505.693 359.594 506.315 cv
363.535 506.043 365.685 505.956 366.055 506.05 cv
365.959 511.679 li
360.095 512.235 li
360.01 512.323 li
360.067 513.751 360.106 514.697 360.127 515.15 cv
360.284 515.199 li
361.276 515.174 362.513 515.044 364 514.811 cv
365.44 514.567 367.862 514.354 371.272 514.163 cv
371.788 516.456 371.994 519.228 371.887 522.489 cv
369.789 522.609 363.388 523.222 352.677 524.329 cv
352.707 523.771 352.72 522.13 352.72 519.403 cv
352.72 516.676 352.553 512.235 352.219 506.079 cv
352.198 505.655 352.169 504.59 352.137 502.889 cv
351.845 499.313 351.736 497.218 351.814 496.606 cv
359.21 496.347 365.884 496.026 371.837 495.647 cv
371.837 495.647 li
cp
347.818 496.075 mo
346.609 499.307 346.058 501.895 346.161 503.835 cv
342.64 503.268 339.884 503.392 337.9 504.207 cv
335.781 505.186 334.262 506.652 333.345 508.608 cv
331.762 513.664 332.314 516.533 335.001 517.224 cv
337.267 517.482 338.903 516.349 339.909 513.816 cv
339.375 513.716 337.715 513.794 334.931 514.046 cv
334.931 508.884 li
334.931 508.699 336.56 508.566 339.821 508.479 cv
343.082 508.395 345.521 508.291 347.138 508.171 cv
347.188 515.915 344.635 521.052 339.483 523.581 cv
333.317 525.301 328.679 523.739 325.575 518.895 cv
323.637 514.542 324.138 509.366 327.076 503.371 cv
327.602 502.345 328.246 501.425 329.003 500.608 cv
333.53 496.188 339.803 494.676 347.818 496.075 cv
347.818 496.075 li
cp
304.194 489.576 mo
307.166 529.776 li
439.794 530.376 li
439.051 491.076 li
304.194 489.576 li
304.194 489.576 li
cp
ef
180.092 514.073 mo
182.389 512.81 184.8 510.908 187.321 508.369 cv
193.125 513.021 li
189.125 516.657 185.97 519.238 183.662 520.764 cv
186.788 523.666 190.116 526.688 193.644 529.822 cv
191.365 532.563 189.224 534.282 187.214 534.985 cv
185.135 533.067 182.78 530.742 180.163 528.002 cv
180.163 530.47 180.398 532.76 180.871 534.871 cv
176.87 535.069 173.656 534.833 171.224 534.169 cv
171.209 522.766 171.28 515.462 171.434 512.266 cv
171.586 509.069 171.679 507.07 171.714 506.274 cv
174.915 505.685 177.731 505.487 180.163 505.675 cv
180.33 506.954 180.306 509.752 180.092 514.073 cv
cp
167.665 505.856 mo
167.907 507.673 167.765 510.135 167.238 513.24 cv
162.847 513.328 158.938 513.623 155.518 514.121 cv
155.432 515.103 155.4 515.902 155.422 516.524 cv
159.362 516.252 161.513 516.165 161.883 516.259 cv
161.787 521.888 li
155.923 522.444 li
155.838 522.532 li
155.895 523.961 155.934 524.906 155.956 525.359 cv
156.112 525.408 li
157.104 525.382 158.341 525.253 159.828 525.02 cv
161.268 524.776 163.689 524.563 167.1 524.372 cv
167.615 526.665 167.821 529.437 167.714 532.698 cv
165.617 532.818 159.216 533.431 148.505 534.538 cv
148.534 533.98 148.548 532.339 148.548 529.612 cv
148.548 526.885 148.381 522.444 148.047 516.288 cv
148.025 515.864 147.997 514.798 147.965 513.098 cv
147.673 509.522 147.563 507.427 147.642 506.815 cv
155.038 506.556 161.712 506.235 167.665 505.856 cv
167.665 505.856 li
cp
143.987 505.856 mo
144.229 507.673 144.086 510.135 143.56 513.24 cv
139.168 513.328 135.26 513.623 131.839 514.121 cv
131.754 515.103 131.722 515.902 131.744 516.524 cv
135.684 516.252 137.835 516.165 138.205 516.259 cv
138.109 521.888 li
132.245 522.444 li
132.16 522.532 li
132.216 523.961 132.256 524.906 132.277 525.359 cv
132.434 525.408 li
133.426 525.382 134.663 525.253 136.149 525.02 cv
137.59 524.776 140.011 524.563 143.421 524.372 cv
143.937 526.665 144.144 529.437 144.037 532.698 cv
141.938 532.818 135.538 533.431 124.827 534.538 cv
124.855 533.98 124.87 532.339 124.87 529.612 cv
124.87 526.885 124.703 522.444 124.369 516.288 cv
124.347 515.864 124.319 514.798 124.287 513.098 cv
123.995 509.522 123.885 507.427 123.963 506.815 cv
131.36 506.556 138.034 506.235 143.987 505.856 cv
143.987 505.856 li
cp
119.967 506.284 mo
118.758 509.516 118.207 512.104 118.31 514.044 cv
114.79 513.477 112.034 513.6 110.05 514.416 cv
107.931 515.395 106.412 516.861 105.494 518.817 cv
103.912 523.873 104.463 526.742 107.151 527.433 cv
109.417 527.691 111.052 526.558 112.059 524.025 cv
111.525 523.925 109.865 524.003 107.081 524.255 cv
107.081 519.093 li
107.081 518.908 108.709 518.775 111.97 518.688 cv
115.231 518.604 117.67 518.5 119.288 518.38 cv
119.338 526.124 116.785 531.261 111.632 533.79 cv
105.466 535.51 100.829 533.948 97.7246 529.104 cv
95.7866 524.751 96.2881 519.575 99.2251 513.58 cv
99.7515 512.554 100.395 511.634 101.152 510.817 cv
105.679 506.397 111.952 504.885 119.967 506.284 cv
119.967 506.284 li
cp
76.3433 499.785 mo
79.3154 539.985 li
211.943 540.585 li
211.201 501.285 li
76.3433 499.785 li
76.3433 499.785 li
cp
ef
99.2896 451.957 mo
97.4902 451.957 96.0313 453.41 96.0313 455.201 cv
96.0313 456.993 97.4902 458.445 99.2896 458.445 cv
101.09 458.445 102.549 456.993 102.549 455.201 cv
102.549 453.41 101.09 451.957 99.2896 451.957 cv
cp
105.491 445.364 mo
111.851 445.364 117.007 450.495 117.007 456.824 cv
117.007 463.154 111.851 468.284 105.491 468.284 cv
99.1328 468.284 93.9771 463.154 93.9771 456.824 cv
93.9771 450.495 99.1328 445.364 105.491 445.364 cv
105.491 445.364 li
cp
ef
179.642 451.957 mo
177.841 451.957 176.382 453.41 176.382 455.201 cv
176.382 456.993 177.841 458.445 179.642 458.445 cv
181.441 458.445 182.9 456.993 182.9 455.201 cv
182.9 453.41 181.441 451.957 179.642 451.957 cv
cp
185.844 445.364 mo
192.202 445.364 197.357 450.495 197.357 456.824 cv
197.357 463.154 192.202 468.284 185.844 468.284 cv
179.484 468.284 174.329 463.154 174.329 456.824 cv
174.329 450.495 179.484 445.364 185.844 445.364 cv
185.844 445.364 li
cp
ef
142.882 475.144 mo
142.882 475.144 135.771 485.7 138.575 490.035 cv
141.378 494.369 150.766 492.003 150.766 492.003 cv
150.766 492.003 141.792 489.8 140.753 486.6 cv
139.714 483.398 142.882 475.144 142.882 475.144 cv
cp
ef
125.22 439.399 mo
120.056 438.018 112.976 436.797 104.168 436.854 cv
94.1982 436.917 86.4751 438.222 81.1812 439.353 cv
74.4775 440.784 73.832 444.188 75.3296 455.431 cv
76.3013 462.715 78.1699 470.244 81.7637 472.29 cv
85.9224 474.657 97.438 475.518 108.252 474.858 cv
117.784 474.277 126.543 472.586 128.695 469.805 cv
129.781 468.4 130.922 466.226 131.895 463.683 cv
133.56 459.329 134.518 453.635 134.896 448.929 cv
135.361 443.139 133.706 441.67 125.22 439.399 cv
cp
166.086 439.399 mo
157.601 441.67 155.945 443.139 156.411 448.929 cv
156.789 453.635 157.747 459.329 159.412 463.683 cv
160.384 466.226 161.526 468.4 162.612 469.805 cv
164.763 472.586 173.523 474.277 183.054 474.858 cv
193.869 475.518 205.384 474.657 209.543 472.29 cv
213.136 470.244 215.005 462.715 215.977 455.431 cv
217.475 444.188 216.83 440.784 210.125 439.353 cv
204.832 438.222 197.108 436.917 187.139 436.854 cv
178.331 436.797 171.25 438.018 166.086 439.399 cv
166.086 439.399 li
cp
226.251 439.542 mo
226.251 450.416 li
222.655 452.476 220.558 452.398 219.984 456.265 cv
218.764 464.477 216.358 473.243 211.616 475.942 cv
206.777 478.697 194.293 479.756 182.807 479.055 cv
172.229 478.409 162.255 476.206 159.289 472.372 cv
157.95 470.642 156.59 468.086 155.479 465.18 cv
154.459 462.512 153.625 459.508 153.186 456.54 cv
151.663 446.242 139.644 446.242 138.12 456.54 cv
137.682 459.508 136.847 462.512 135.827 465.18 cv
134.716 468.086 133.356 470.642 132.018 472.372 cv
129.052 476.206 119.078 478.409 108.5 479.055 cv
97.0127 479.756 84.5298 478.697 79.6909 475.942 cv
74.9492 473.243 72.543 464.477 71.3223 456.265 cv
70.7485 452.398 68.6514 452.476 65.0547 450.416 cv
65.0547 439.542 li
68.0054 438.799 70.5161 438.176 73.3755 437.196 cv
77.5825 435.755 88.2173 432.759 104.151 432.657 cv
114.018 432.594 125.783 434.163 135.16 438.463 cv
141.16 441.211 150.146 441.211 156.147 438.463 cv
165.524 434.163 177.289 432.594 187.155 432.657 cv
203.089 432.759 213.724 435.755 217.932 437.196 cv
220.791 438.176 223.301 438.799 226.251 439.542 cv
226.251 439.542 li
cp
ef
70.4316 428.763 mo
70.4316 428.763 77.7705 420.586 81.5439 412.305 cv
85.3174 404.023 77.875 395.741 77.875 395.741 cv
77.875 395.741 93.4946 385.365 109.638 380.333 cv
125.782 375.302 133.959 373.624 139.62 378.236 cv
145.28 382.849 144.442 389.769 142.136 394.8 cv
139.83 399.832 136.055 403.605 136.055 403.605 cv
136.055 403.605 150.522 400.041 157.65 390.816 cv
164.779 381.592 173.06 377.818 184.906 380.02 cv
196.751 382.221 197.695 383.793 203.67 384.945 cv
209.646 386.099 214.782 386.728 214.782 386.728 cv
214.782 386.728 209.016 390.816 208.702 398.363 cv
208.388 405.912 222.538 429.604 222.538 429.604 cv
222.538 429.604 228.409 409.475 228.409 390.187 cv
228.409 370.898 222.958 350.563 216.458 338.402 cv
209.958 326.242 197.169 317.855 197.169 317.855 cv
197.169 317.855 197.12 334.46 187.476 341.378 cv
177.832 348.296 155.099 347.53 124.279 356.756 cv
93.4595 365.98 69.0254 381.923 66.7197 390.519 cv
64.4136 399.115 69.9048 429.186 70.4316 428.763 cv
cp
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (Junkfood Anarchy) ()
%%Title: (6280.eps)
%%CreationDate: 1/15/2014 7:37 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb!U'l#Ib6Q6pp-bDbnOB%M-!e[G^9D\:sn?Q]X*BUVqaM,dj3f$bs=-;kO]fF.a_`I@YDhfjI+bfBsPeBJk2JI.k=nEoS#H[Phg
%o@nIJ(RI(!TATYHl\0BfA'H4iFtm+jm'G#&ru[TbY9,[VS-4a^-iMsnBkpIu&>D;6SQOoB4S@]Wp$R-SoD%/?m:uUhE-?SNHiNU.
%ip=SRB(<(jX/k!i/Y6<$=$K@4dr3)60/'N[05p<_Q]I((Ua+7b^k_peY^F'K#Osn7_[kX0$g@9[nPLVYIA6Q#B7K^.Ir<='H=>8%
%^A,2+f5E;a*q,GVQa\pRr]@JNrMJ3'?a&paqM"R>c[6mC/mbW/>e[gre6s0$Q2LLR]*5e@rtjSL!V4%(qF-a*ldGg]n7)L[s*\VN
%s4V;d2uIP0DW,`.n%O."0s!:s]7gdd[7q1!XT8FtJs4,"rb6e/GI;g''6?&A$SNNsceLoHT3m(.Sk.I!`XiP37PghE'q+C^Qg;D7
%^%`]8ji.'[iU6@;nb)!n$B@H;LV-@>n)%EQn,IcVq'\>#Yc)pJLYIa[<JL&6QWHg(Z<7b=9eH@O]RRPB'Ipc/HA=*PH80U=]0F$A
%I^T*X#&TbbaL?BZRm5a.$RbeI':K>f_-po,%dRYJ`[u#Q;+B5-dl7'Eh4bGPOSd$mI/][uh7*-FD_H%CcBB2rq#10Q7A[u>/k5ep
%$TK#nT9t,V4D!'(O6`8tEFXJXqa3a$h8paFV_S2Ce%=p)2p4kI2,)WSEBtpu/qeZE@emMJT!Ul:$"!VFGlHZAr?1!@nt1!u\*rj*
%N;3/6/45uGVfVXa3IL._If&[^+4nR0*mOO&J+Ysnof\c:rQCP<dhpIZ7^S$C+!6OUc!j'sr.]^Km-G/*cHbqCfbqLa4%#L(0CeGQ
%Q[R3#?bSp\QS8"TS[;-pB;B&&[s0`Zn!lM#%lD28n1U5=?$WjS*>X?Yd0>NG^Kc-B%Xf2[_S>jRMo*6m8iKDT`hMrUf8a2<`k!k(
%m]"J3c*0&&M`*4q!g^+0am2^f?KtSM?[YmTY7&_Alg/_@:-PF&2pqZP$u<erkXlGd/(a5&ip[>E@>u/R\i'=<eqehG(D`rkJ:H&/
%!Q)TbL,Ist7Ac6+DQ_7b@qJp&j>/)neEIZin'Off0COn'?5LE!ldU#em5q(;S)jUr"q/X3M?WQj?+GED2<%t";d.3[F^OcLr/3I8
%TKJgF4EH['T8oV0T#iu+9r:!I?:dVC+u;g1XmWpK:\S0cf$3791LfqOFS][:a4Kae"8uR+99WFH<Q\@tlNV&>0DV6'Eohau7NTn2
%>PTgg<ojF[oZRE&')?dKVTeiNgNftQ2DD&ASUA(f8Y0gkEZS@Fejk_ap`D\`W&3a'C\=b)WW.7IJ(IKp:EC$461n1V)[?8QId2FC
%W.0k<)1>3YSY#+Joi(m;r`oK+TDG0Bro/W`lDOW*I]e1P:]7IIs!9Z9*9(>EYPt*mdSHslqD05=?Cm]Pr<Lgu+/e;^o.`B+7ijnM
%m,7(Lo-:%t`l&t^BCT].Vo'pK0dkk&q"8,\p$nSIA>HoFd'Z)Pij.^-h)[hUk4UXMI0AE!7!2#Zq;\oD3:8s3EJH`eaeh.J![<[J
%g(r"1fXbR[pt*I]7n]=]nU(W2kGR@DaKS1orSo0K/Dg-[H,nLXMLR]R4o7TDp'V#r#2W].&;tT8rm_n[W6`raUD\7L!_B[o_=Jue
%s&OaJ3+`&NGgAoE:/I"d/]/XYFA@?N&au2[hCkfTb4rF]eD!*68:Ve=pK^+4C[6-oj'RpWkK.?%k;4pU/jpa'g-a)35Yu++n&#)X
%^cT-Wa*ic]MdSm\2LWToiH0=-TKWS+7g\I"3h4B@da.-$e%s)_h$7`A?]K;SM6Ip_g)mEr=9dWtq]S)2#f_8MLiM$X3\NOt1Vj%c
%3<BH.H1REDg39c8rB$NApVTJP6X%*\g=not/SgYP5=nuGPBGEu!]"8)H0"fXZh(d*=S#$$B(gVTbIO6WFBSLo52JIr]RR_\C6YsC
%4SZ[/rY)%COCE\28$K$)Y2C=B]PibbT3SuK8EE@@jQV]gg)CbHic0=J5G5TFm<FFm5rt)3H'l_6:]HQt"kugLaURP_C%E=.g?,8B
%4qlIXY25jbM,q]N9u]n`4+>[e-sWRS/?GG9P!P5Q_S<t5%keJfhBg.Q@%ThFqgZ]4<I(u?]3eNMn\!+MA`o]*D-:i($L/upm/El=
%XClthhRE%13lB\rqT1h&F>lW@nD<[*7kj:9>jk\C)@><#JjVY`@1RE`YhPV5ihEHeNtrN`#g,cL3?BEPZ1ci>YrRinSq-QS]#i$Y
%N./=1XqZ#%5+Dp<+/PD@_(E]]V_bJr*.C&;s%U5%b1^68("C!#>Vr2\HcYi^GUA"]O\2\Fj)uHebL-(U1d3kQI&+:!+0kZ;:WHU(
%4f=en[\dBTE.0X]$3q8L)f49O^4\KD8qUq@`f!3#S(<#sLYEDHSf[Hu?I!"^Xm4/*ggs@'[OG;5B_BL-gQ'kTKX>7].@-/V4`5Vq
%NAgkhbDKqkUZ$Tl@=hKd-4k%.Jqrq,2Jj1@o3M$^K+c5FMMpUIZ18OdSF0fpTJi9/#;M/ZZ05Xc-%8pqPMHuGD>DTHUYF]#-FaqJ
%<L5C!r0rO$_;UQ'rK4A2Fm&)OcC7r":8PVPLWtQT_^qRoK5")Yj7D57k#L3r3Qk$`e7Hj,g%B^73io4;G.$!c/EbsqkV1,*_R[$/
%9B*W"'YA>_o&UjCMeSEN&Tkt;1OBb.S"Zd[S=_$m_VmSH@jnQDqIZpX7a%TlFhqV\/R24'n+L<aF^Pqm_EEIPh*2)3C1!+/B7a>j
%@*#46fuFX%-prpI]fl33Y35>F5/$C``$Bg.-Trp$dTmpcBu]cBpBO2i`K4*[7aO5s<B3q!41>ak`D3[ZoZg7R-"_-XqfpZL42'n]
%UQ]u]:!Aeu7WdZ^mG,S>k8_=BLTn#'PA4t1A%UM94k]*^_ensCeMKFg]grL4$a^qZhKjQ%W6J0-r_Ou[)=F9=L!&gXEA316(<He`
%7ar($@;o&gXU^lhI$]HO0ko$0mqE"IOP`9'>boaXKiLo]Q1H!T8iV$(,`Kl0a\[DGKu1j;UM<o.'kg71o<Gfl;+%(1TVDajB5H//
%*=:&A#AR]G;0\ELhanS$f=QaF,#2W66`Z/GKD+-j6>cPZ!6Pd";E$J7f+$GtaIqIG7E&4+3)cr;#'%a9JC,Z;df+0P#eTn\%_'[n
%D;Mk;UcMme&I!-]D6$6]fa661'^fWFm?Y,sGr!TN,_W&B`Mt/2-j+&P?pIbe1fHGkYi7SnqcTWsIeP=&Q%,]gM.<r3WaQ)haDcSY
%10a,QD4:TT]67Lp^A^81&N(\`c*#L7B-u!&0G+gcbJen_/#\(E1.tb(n&/B!1l996'._+7eqMA2]'qSa3OeTVqm"PG3Bi$he@uUF
%GDN!Z9I:Nt_K_C>EPH>1j$sAi#c`cAelfi[neRGOak,^pj[j.rm(lHZ9gaGEcSLTfkEI&U5bB;ZesU((.he+_!'E`Z*u<AP\MBB=
%RWUd%N4Y5%Bl9-/7S:q%fn%s$cEi9p`%c,&DAU(5Bs$I$4XVP7.Rp_!DbFBt5s;s:l>#fpUo^PA6j7^aHf@4,jk1bXj8+.eQY/L1
%1!I3UjHZ\.1eX(e<K<</^ZjG='Gp/79QcuSc7Z?hHo=2e,!R%'Th=1;M/sU@531b9bb7'idR-U8QWSl3qE9nVhk-fH`r$+Z%%/FP
%&8f;U@GAes96)"cMWqEKKQ<hC3=cj4002<pR/;dHk]Af;WiR=<)1&M%qg=n@J5M^i-8rqVY26jN1-26)@Hu1e/q5@q-T7JuZq7,i
%*ngIj+g3JX<]3];k=#`2U2rJg:u0[AWjB==pY!rT_X`^_&FFbdkth33NV<kg^L]6']^Jo+gRf5&4*J><d;tr4ru+%FSsAB\kFnI(
%2]DWS^XZ?[IfJL'W9/]A4hJGoVmMr]r!pVg0A5^MFa$O8a^/tl:GpJb]LWi<IZ.E@noN==F05bjhGmMInW^_ZI^Uluf$?NGYsV@V
%$%ZXLBei*Ab=!)(pfG."WZt%,jYjE^'/+Zm"4$b?OW3E)L=K'0Q,:0R21Hr!GRX,<d17^:k(lY-3YcJ.d8b894F+*#.A*<eL4O;W
%kPMA03=(@?($2YW3Q4raghh2enNn-,H7-nCC9h$JC=-K6f]j.oVb4<7T?AXP@/2Lo[Y]rZ+I@1;#N@1kltC0qLgl[?e8[?Wj+\o;
%+m\u&*eKfYk1=:;H8`31@Jrm#]P-O*2E,a-mY@<#mZKa#<DYpeP?Bq+8u]PF6#g[L,7WTNoACHJ*u'uWr*Ok!j?p8EVcL",1'gQJ
%UI#ktK6R'&;jI`J#$d*.aei5W7GeF4UX!g/1b+Y!$L7R*=2het4BDDjokF9%+-#AF-QT^`0TB2^G8-@,`';fIWApS=E^CqJFA;$n
%-G.u5Y+Lbac4KB5,+]IDP;Fm*jU$3$g5OR_c"\ctrimrY"?Zg<*CWH!N3#;mMsqTn#iK:JG^b8)@hnVJ<]0Tc:KB*\M%n5t=7&jK
%a,)jKojhZY5&V($<K-Pdb06l2<;Y&PUB=L?V>67K8j\Fg512DN-u"197BPgLC"i@Gidq('Xe/NtI))I?oN<8cOsN734X@(Rl]ZnF
%*5UM2I#:@@PbA"h`'*Y^J3eXK?2pr3lAtf;A04%U2?%O3qen7dnKEui)KAPtr&CPN9+]_"_>i93jsbP(_Tqm<f#)Jk0t_-Ert[]"
%`knq"Yd5VHA@uhBb.lfY=8QGkY4n!K2GZ[Oq1i#K9\nZiPM[[nIgnsWQ[W:Yf+DPWSSjFNf.=bF..g)AF'*+*"Q"]/Ra#+ea$n\=
%a)jV*>-7";)W]%)<W%Zp*uh[Q)XkoI:J>;Df2!+t?E:"8NUGPkpQ=IpC!(^JlU':tPX:cum.dq3Z(<,+X\sPS[AV"DR2?F112GKh
%r$,0^q>o-;VD=,5<RZ"tWEn1B3l1HVpWfLiP\(7eoS@rGMOtSnef@Nrlg@+'c!'Mjh///n8eHWHFb[fXj,iNse`4!;I)O=>qK@cs
%-R%n`GWmHQPsu#3CiX^BY*m2^iiuI;rGei_2ok18G*>ed5+g)j9Or#/+nCI=<]P'/hHQ%]qMd1#AUK95]FKkdQ=WgP59Db@pQSM,
%.jd+'KVH;BdC4QChH,*&U4VP)*CP6VA5b+l)2?B^reD?Dk(?E!P[f#dSrftBl!(1ZPHQJ(9,;PL[F\YYl@>%6R5a<)>4--c>hBY!
%s5@5#gDfGRYda\!kL9TGOn%;dEDn/>pj#tHm)Lo96fCX3jKk%a2DF`IWUNG`L59Cn&XrtfB>k%8VrohZ4Zm'nhr=I"A!C1cX1)R+
%'@M%klHX6P147n/[j?BJ9+l0#$SZ+oloT#^[>:m&^YP+UpF59249&ROm<75DRIZc(S8V;@HM9/"C=mcYA@h\`fR1dl4Jm`kqeKZi
%VNSm-CX^^WTj9Q.P"X?XhREM&59K"--.I7sq2\FuqNDP,HX1!n41/:9^6Y5UA'rO&mAKc"@<4>R6_/:R)iG8M`Oa^$<tFNLE[LF?
%C*%QZU7^M&D:eF+L-!XembU,jZ]t:TUEV(SBS+Ypo_8GSq3]Rm:%QWMosjRq/?n7XJ'lPW1$7>`J(j)bd19%o7:eZc4RTFcG9&Yh
%!o?l3_1BY571m^gNH<\,S>YD,'IPB51aquilRK;&;O9Hjc?)@u?ab`8kAac7Dg,Et%H;R/ln@Nu;<_1.OB;:QQ@Wc_"Z,T"G9+l[
%SJO,>o77[Z><\jOlg__1M!L60X!+s"]@Le+MY@Xj(NJ]me:T+o[IPPh;HpP70[95l8NC`-g3/^f>/>ZDi[1"JC^=t8H(cCN%8Nb/
%](>+Hk_%J]:)L:9R^\kYfT0MVkZ>a*DOW!"M_.r1ojUG?`\I-#7>[W)kBA?:kqUM`fMk2Tj1]P3?UA'ZTq?q\brMZT/fj4N&]n<^
%eYhEe<-(qG[R,*X79Ef-Ejt<g">(D:ZLmP$OVtfM?2c[sFg<n=7m8FLkQOrakea^))N^tXS.B&p(=]<dd]+A]-gc`s&5?)XSaGY]
%H:oQ/eJ4Q"V_Yh5k05-a;ls5j[TjAs[3tEB;[B5hs*;:tTH#'aHD9VrS<p5PN@o%E[cD@^)EE(LMairGFj5]lLFT9k]/H\Yf&Dq,
%NN)b%(7(*O:)2XmpV-"nOR]K@+k?$;NH4,Vk3$Ko>Ee)[knFS>PHtAE"n;6Tfo63XcaIcHaGN$NS8%HiW"i]Mp0gNoAh:u<-7>T!
%S4-0r0:iu:72T[Bi<tme4'u/h7CU]m3P;]i-g2_`:%UWM\#^iK2htS63MCcgW<SudeJi+"6/qC`iRkM@+Z]#n_=+Brf#MQN1S$$5
%dm[s7=@*pS^EIj5pF=1!S4n0!d?qcoZ+V-Q4l)9X[]&![V[t4??B]7@PnU:fX#S*M@$Kn)@5Ur[h<aXgo0Ls`=6H+8Rn!%c@QBXA
%<V+l.gE`e_nYGFf[DdCG*TjV4T-\LZm@K?b5,!l@hG;>2o_mAejaa,[F`CklWDl)87tsU,g%Jmeo,>euC1_"nKr"pcE;5WG89J2-
%`mmks53q$QFm&(_IOgDjdhL\)gb'=)s2,DWfc9tKBN#&393.+a%t!0&9gRooVp9Mabi(]jJ3sP6ACumf*!Tsdpt-W_h`6>G]UZOi
%le0#<YVoMSoFmN<q>FB&f^7DoD)_E?RdSnNN9lGMD-io!7ImcjpJp3f[(/fO-Bh9+3doSK7@P@7Y-9^ReZ6Kajh0;k8L3V]X^2`%
%IV[-&;`4#eYHt^J*P;jYHoO2?':!DGeZ`QLEZB`%H8:p]MLkm6*t%O:Z&$7Rk`B[nc.1UPZ?,'@cWu]_e8<j99pSASB[UpG]am/N
%d!BOo2TE/+TM6aSOK.RA#+jjO__p[<2))/(e\K730u$AiHTP->P@tKAW8_pA1.k[TpL6?1B,$>-ZhVm#TL.BPgbObJ8R^@GUh[7k
%@np*&7j$9=0>=]p1q%Z3_/pjHg8fdb&D/;2L9%3[a/.<VFn9W-1C%B*9rW'0d[^`V>4FG9H/^pcY1LX$Z]hmi`a08tRonN?["m3&
%Bb@(IlJYD?#CIJ2>dgPQm2@EfjmMOEA%"M`k3.fYe[@GJ5$q(g#$/ss3,*WJabUWg]Xa]tg<CL2Wr:$JK85*#5b@1"f/-=o@7fKs
%aDhT'b<`!m##georc#_X02<sG[h830jLP`0ce9>r:Wo.D]i&,*S[4FB%LPg3/.7hReEAT82f5^Fcp)dh><h<4StYl!UXPm>G'/!'
%AQVI:[\1</ZW0EXG\c8Y4(OZ67,/gq4\d24mACjM4.@W;+.W7Kiq_qG,IbOs0D#M]G5b02"f232]aX/<3IM7eN;bu%_L@Xue:*u0
%nZ&+I>EPQKF#k(.g\@nWT>t0c+)d5_2sH4Z,:r,jcQ)jF6GjjY;1CFZO.H&(q`Ynddl3Hf\qiHAk=LlpXb36_hHP4)fA3Wk\76W6
%T%._Q4[6qD5&0D,^F&<Va8;&JJ,Ch5p>c,0lem42]Q;%^/7=)(Vn<Z/!8c2J4+8-'SU5af.c)uW@oW%3>B_'i5FQ"na_(1ciHY3u
%8H)$bHK4On^]*]:6;VSSo>_1&4a>l_L:CS"mmQZmJpJ3Y+!mk0rA98^V^&-!nGFPd4mFgJqR83'k&<HW3D["]cLTNKk;O21QB05]
%le1[up%mh@!Im:?^V.;Umf)qFp20Z7rk\&0Y92ZX+oM@7pjmr;rcfq(>i%SLhFO\3l?D8!hd*pZ07SJ$qsNmARicR@IJ1YE`U0/f
%ia:9;a4pL7s'/n^^4#Spo#L27?[Qq.I(N__l$g1+5321\k%&a_pU^MJ^:[Y+Y8@&;4NftNo1+0LoDFO>O14l8[0),Shn3<'h;1"0
%(Wc10@e#fHrS93!Is8<5=l(h,7Hs^"ja6f8.9fi"YHXe5?/Im%aX6O$[b2L,:P7f1UP;r9rj6p![D'1r.)"r=)j=@]0jVNmE;eqm
%lLNoFFP&q&mmk[kEIE?.m>Xm4rnYIfMa-%S?Ib%^#3i1GjSMGqk*$[Y1nGXO^AN(75?hH"?,"!ZhYhQ,Rd5Icq_HNYB9/d]'mG(D
%`9C?7YjEf%V/\7&SR5WZnCte1HeZ44g[]@WPDGPapWNHWo`8A%H@NT?\WDZ^IWtUtY5#TA^:Se@6LOMBb<(7%nn$:Up)AGl"jnfM
%0>BWJ)F!;OW8@na^4-!![2)L0eN_sHrp>Gi/\[P$r0rN4jh%S6J,e?aX$85?f8G-C2Qnd;n#k6<;7H<9s60K3`in:_^Wkc1nZ,5g
%rq-BmqOd?5IgGCZ$e$^,YkY\WmhQ_cj@ad@#l(S>15(PTIsUhAi[^DtIc5B[M9TQAYPPlmeQPeMe+rEk%Y4S-nSd=.pCE>ZbK%f\
%)d/_js+'c;_9Y=BDC%NnlWC"(VetfOl#a5%gC)FV+,NS<l'Em]dFJ8\iR6C+FOpe4dP#K>mpN[O>NU^E1'#tHT9h'Ecgq'&!rV^%
%YPrcnZ/5$D5:sVEqt8L!2#'uDm/HS#]>q<-]mjSQe,0%(Iq^jVdO7i%ePDN5(\d6beB0DXqF7onI#WUs5Cheiob[Ycc,1(\QhM$j
%,V8Ul7_!_*D>Sd-or^-k(CrSGh?Z?CG%iiFdm*knhl<1#S+SMJFEP4lH$s\^2W^h9pdm%+NJN(PYW6<X68RUHr/n$?@\IZ1?]ume
%q50PXRr[:b>V=o=XcMJ#@kdl=:'aW3$=CP4?7_c:Va9fSkN^m@j6cLe+T?gg')hZ8#qH<C<;>s-9)YsO)k#'N2P:#]=S^pr^O61U
%rI9>CJ%3'prSJj>K,mah$fg6In(5a`4j3iZji-7U8)ZV=r$8)IF!ndF>he.sUZYE`9u`WcIdi+ip>Mr]IJ?3r(#jHNr4ti#[(^qb
%do!]L2#S\c-\COWmHqWQ]t&P*,NI>Na2`,e0,Zu8@ZB+QI5:L!"m,()GPA02F$u-S%>.">ga=h;lh0</67f6G@5@?h:Zh\j8E#`,
%BWc(JO0d'kqTQs'bDY_tG*rB6QOc<!1<%/emGhfjjjdohfc`0'`SKWIQ59k7]"P\YF$'>4EVf+nG4GP%iGjjqd:TS[h\`]@$X!=S
%,L5uL]>qlpNL]EPHhhW-[<u44hB9MJo[IL=\@>c"Xm[&:Qe1]/(m!F5%;><W^V"j%>714-+(X$I$YfU4lOCEl_r^jWS(m''`BmUM
%S!Otn\)Yb'$S/Q1[m%7fg\Z+:U4\Ho9+7Q8n^cMj9fn,_D;.&jCg?.2H8iF`1e7GgQ8e9!&$IAXfq@oJqt7l'rr%05VtJph)*2-=
%\\,M$bURS1K:?cKitZ%i2hKA&'%<39R>bC`=^E[u<eYbsm18N@bBMQrn(0lJmo!u1E"U,B_+:FsOf(knF$bqG-KJT%Q[&ftn;$\S
%:PG*+;9_)R`p"h2I/E@%:'g^36X=!^f)/i+Dr/2q*qm5#]>>7hR/WmCl'eIII/;+2G?7lAiI>"f5=khFD5O8:bcAiBra%#PL[Uq(
%ci<uHA]UI_:i;K*/V!I'R[,mnQOAoobD-u%\+gYl^Uh'\0-22'DgsBcYrg>/;2F@"a*3reDVqYdmguH^1mQVAjdhJlr9h<-H,#Ub
%X?MhaaQiKu@XTsUB,=qRnb-u!IHH;dK)3s73o@S0RSN6:K]bPQSF/Ha/N3M@)d^Kl]283GL)$;V'n/AMiE"]OdoO6?M3pl@5?3ZL
%XNNLos'KI@_;b9DB?`p#D`=qD$r`dJp\G3.L";$f9D^hl^U3Oi%@af\Z")MOa=U%JDXQ1$lE&b7<Ad@_qN'Ai-[-bM6n,k+*,DSq
%L0Iti*GG09oB"dIRJY;LU2I<nrE>NVYf7CG%l>%""4b.t:i3Ya$L9.Aaj2f;P,,1@:]-ioDigf$?urfV+>.PLX/oH/hGBHl5$XDa
%*l:O3]'],jpD53dpMWiJ%+]M^Rm!j==6l'BNc"Q?cUM]N];sJ;4ZfR$<]:PM#C:\1`ST<^4'!eWGI>(6$TQdXhZE6&?N5Bs[^$a+
%(PeGB+FgthT%H^=cTb_WdoM:ina`rllqVAa>7K=nXFGmcBL=X=V^fkM]Um[PmG4Hoi:BSbk!SP(RtULOEFBa!=l)C06XX3>m>jK'
%>_tU`I-\gr?&'?U2Z\\_BCkHNrQbun1HD1PS]MJ'gR6:Ud>p5I-Pok9inNkR@;U+1s5Rr2o=N^>]R*S%d`l4d6'hCs]h`lGP;ehi
%<;VdVE,r:6]7b16^D-mFki@L$1k^TBO%e9qCNO.7hm+eP?Hu-[LS'm,:=f;c$a&!@0EH*&IW[keqqGdbP]kgJmrp-XT7k[_CNb3B
%km,SmQtuPAX6GY!Z@=&;+/d][Sq_!%+)!,^d/HmNlS#05e;fj(GH6-)LFjS@Tq<nhhAp5IDEN/"Ym7bL(/*WF#`ZZ45JFa4m3<B`
%PRPu,0_7)1gZ?[S$+fJ;VCH8O9"mK'jN&-e5'_R^priMnfW\g?>qH!,(U*l0m<ATrGDl3=a$*'"GPAS+P-abTLl!AQ@ipu@-[!7+
%f,s](J5+5Aa.Eh[J8[%^YEsHS/9+3,BRof$_*)Ks.jZS!^O'(@"9'9i<p-<YJ=GA5Z"DUp$JWA6bYSh2=0NCc(CeTo:%S=XH"tsX
%rLUHA(Ef6KS)\.$GB'igV:XFA<Wq=9+/Wg19&jOU)*<aAC"QTe6ep@2P*231*bfbR.epo)8nls\#.nNH9j>5;cTJW*KGM<6WY1Nc
%@e&Tuil/UphtnGTL$,@SDoSU0gp>h=%W@bY-J\*p52>S(c$%j9!R2IX4WkFkedn*cDs$&lZbG:cPQ][o-X4$bE,WYUK*nK.Np-R-
%[(<h53FE5h8_2gD[sQ@c1bDJ%GiGd;Jsa:7j]WF@^t(bDnQP@0]"S-i*&ZO!N%XT#0qFlj9S$-Wq_U6J4mt;3&o,qg]?@smYJ+5u
%s1#3qH5jlS+OffJQPWaN:Q9$mGAea.T6c3i%I3NS'Z8L+:JJmXkff4qe&RIcXkA?YbP1<eLig;B]3:hE6nq;q@PaJMqPKA?5L%+k
%R^21;RU2LLg,a9HCAD:d?YcIFJD2Vk#`Bkcs4nk!q!-,1cbB2Q]1ZSc`QR$57@rr9(9_Tm-5"$uBuZd[H*R-jOe2J:T)>9GW<CZN
%o&gWt`Vb3Nnb+F2q<Qr-n*'/uqUoL)#6+HkJ*l_uQTrn7?cY/*_\!R)ZhVB'T1<.6n[lbIs75N_0=qmX0)orA^ARdVs4QWYCt\eo
%RQYq:p;k@hC9#g@d:rFO/<[b)$UJg;Mr=)K=0Tp"$ZdS*g%s&J2V<E/*Zd<2q=q`;`rum4$YVgu.H(7ZH?1ip&1d6M!uu-$@Z:H^
%fkj:Wi/]WWVj1"8BT"Qf-XDN4j-d_TlS)'q)U-;_p;7#8-4sL,id>Yl5V'U.:'?=P^!%V;fMAARXZLO_3)"i`+*m2uGS_m+bYZn6
%g\_TNlB)KXM!;pCk[iIskiEU"\JFEW)M,HuAFOd#Y[3.=pRXY1D6H3K13RPsVo+AcecWG<jY!4Ma9:IR4p!>UllC(YJiU[?@LM'(
%Z>E'm(qPpYF@IDPUmH'$LrKI':\rJ.`L/jOLD(J8C;+m>2@*=+UjFIN%"PT,\7F_LIB\aXaaSr_$I9#G3eq<&Y`mpL4R%fkN^>iG
%HU4<Ej%1$lBbCUf\?gQX[N]B@HSPrc(cRt,]jT7bGS8&i4Uo4V`(#;s4=f5<XE2)5=8&m0Jk@]>14>*Bo3TK<>n<L-M<jcE$BE^E
%@aL<Td\tF#A/VTnSNc6BBnHX@E0(M@hS.\DN^dtq]I_s92$VfV(1FH2?C%5G/rcD0"IXoL44m((m[m\`I:MVi6C]->$3H/mqS3_j
%q)#C%2p.KD#HYa]2![9t`L]I@"`CRRglF2mR@?(/ZkCOTcLbp1$kX'0,<Nt5A8X^RMGl$8NtI;4JHtudO>O)u7-ICslXZ`5:jS7X
%l%;_:6gt4N1P83l1)j&'++sdPa;G8eH9s)5aQc928]]2"C%FXk7#(5,HJ0S:ZT/LdS0<h(`om^N#?gQ(!\#.;0;K8o:k1h-;>.)X
%jq34O_"<Hir$_H"6"C>.#D#,V6"%Q5@h7'um@@WZek6c*7s2]5GYWcaAk1/1XgW6cMs=kSpk99q+!J(6b)&9)U[JMRNKr>8lJ)pV
%$,%Qkm"X!m.-<Y(PJJ)4M3gBk*+_X$ha&[m[%jrF3:p7&-AJe41dVgcLL*"h,`J=*0F@h0A;H?Zf8itq)o.;"J`$_*et7%>ScXU\
%\7rA^4X%*^+Y$XY&<t=lDH$t+7@7b2bSZ#,bTL+>'Z,.;=@?&"ST;#PY\l?QmUAs-l$>e[i-Qbd.oMnYFs(OnXj4q>>=`Aa<hr8#
%+iR$09^<"iE<)14-R*X;16!/_oqX\NL+t)(H*@PsO;[7hPtZl;dg06!JJBTm&Hse;\1TTd1-t"!@$FJU-gAnVkbHSKfRp^7Ys>f1
%=MtUK)9KBTR(\caV?]Hk#lk&JkXcm`h'4pGN:)gi5iF5TBTgH$:*LAV\4F+PP3t^c%*EM9.LSs2m;.g]PV$`"<"@&cfb2*IJaP9t
%![<9LL+aeFWZ.j`)50"<@[/UA8_D773C;!mR4VbQY]IW]^'(*]'J=b>LhQ0)?V9dl:I+#70iCFL%[A[NJ1KBOHl53\,gD&sAH^e6
%2W[R4HJc[j?NM("^>V^I$e8>S&s+f9.:3F$0]#V$EYP&oC:<*E.+WnrIq??QUA\=U9GoXD\MA8T_jI\F#-jFH@oR="ng..NL9^4o
%!$WjtiCdWapi+BB;.Q=CZY$q9h&d)k=m!oT#a0s&j\#SFTnP-#$/!bEQPIs<AHc\['`0PDY!EXB]oRWbQN5ae2gd%cR\#ct!U2>h
%Q7k`VJ+?k,b7PL`hlnDqM"[FGjX?Rd&ur/^.*OsPB=?UX['Mdd95J<q3MKTeNi!NCdWj0pB&Jn^cjCOaHtQHG;c*gPA9jgfOdQ]:
%!e]-EK%iZgS.LaMh$,RN/a<<MU(u_0WO_([Fsb_gdiK4@5Qir+P7a=R*DWQR0!#ehOpXHL?<GudH-TpK]L]pm31U0tfAMI+ThR?G
%X!G:G0W*7lBV:s93YGZ9l@?doi:rrfWYb9FRNPSi*)/#RV:_rEVe-fT2sT7#TZeblk[14BF\0"5$/u3AF2Y=;8BgoqUeqt[47iO'
%M.T(b,(M@kbIIk&,^`@;Zo=21-=A*JN%/#cq4sBdStO=8cZq2PM(T5Bl8C,AHa-ZZESMFnP=QT4D\.793#$G4o4#XA"(MekX?`j'
%Gu6L$D1^Kf!/_1d)BK*\)]61aja2Y'h57tD;W^4A=e.2<+GA0pK7&l;f4r]SFp//X\F5)8",MQS8:c:l4$b+9n,a:o:Rnd\mAbdA
%VAGFdbRiL-67K-WCGQ>m-b`UJW^<-d$a<=+FB'[&[DpbP_QVJ)?+ePKN,[I%'mji^(e9-ChaJ]@!efst4*`Zuqh:h_+JLQDla"pA
%5ahBI=/'kLBV,fn3b!h_Nl!7ik1XE5A>tE&<uKGH=Fka,V5lBIXYm7.PgNna+AIOXgk7ek4>:r;`[%4bJe>Lg"Uc'n+KGMiSCXhu
%hWot,H%:c6d/Zls@HH]h6QQ]4)6j1b`(F*Bnlom7bq6RO&+h$f@nIeM=qQXp!\L,SUMmB`5Us&h0]TN`Q180NCrc^9UdJOdBbnYH
%Z]hOIU`H]Ao>F7&Ab'&@XQ2[q0F4h#g7@juHK>b&Wr\AVN/GotI27BF#+1ojY8$b<_bq(9eS%srM$koI*!)2L7-cBfW!`W)!)MTc
%-jr0"i9,o),tsT86Gs!=+>KX]79F;?@fNGa(SV]00D[t"_23^uWgR+"66coQ5d?3LUp@i-@CTLg#"B#,!]Z3oM`g^c1ROtp;J@J8
%2@S5&1&7oL18XdV#.>A.Lfmkog)sG60EtO<:A"&V"";$@mMsc\fXBF)aE"<ge&,W.U\.#sYUX0\.I)9'K+?_SAf6:KfRL,+%D4)`
%6:\dnbs;(7H6`cOO<7lFMX@*"epD2^<Yo<[(r.)"2N_B""G9,G(fJ&e=%%bYY_5RpG)D7!I5/iA(URB0016U>6VmmKCC63kY\s<-
%^i6Q-e%=g)0i?XB#gLbTSBOorYj=ik)MCNjh^f.Icjgn0[KV[a!9`IW'7BKu/G?B_*lbGo'.au_Cd%`^N%?1e2@`2D7]6>V7,a+@
%mfppAppZEAGZWlO,M\h<aN-;;aDXCX!4lPVE\p,M2C'%B`F=-Z\>G@q$s-hnr##T*jD0R)7CXB%gBaMW!p9fHOZ>iaK2?9$<m>pm
%/BRgAn$$>UIQNPA"kmPO$)(PJ#p.17l!B2e-i7ce'YOVk),W-A]`9jipDO8TH>>MERTsJT2&KR)U>>sqGr*;PM4oW^):CVaiN*A:
%Q2Y22MXkQF!2F[eD:hV69"-"0@U5+XXDBij40R?BKP<`Hc/q8p\4?uWD'9%>BVhtOo9LpgRupLM)P]]$JX@@iE]1o2,JE<4)plDs
%V8MST:/QtFZj1)b`dn\3;e&euB8$4ZqJg8-TIUgl?6NX7#9s;eA3O]P^7+JdR$_@oe"oth6=8Oq<b'&]nH7ng^h_rM,f`ipm=Ag#
%al#]<B7oQAF9A+8rC''kU0C$dmYT;o8'D0&4GF;5U]QUVcN?+k/0eGu!2^L/@Ls5m%Xs)n7i[hJ%V7$#8_G)<fMafYo-N\[8IZ5)
%(4e,pE"P)e,%Ql^XUhqWG#U</+](1.?LjpiS9N&CLf>3b(J,O?#[e:52bGU\i.IKgSXT'K7RRLFE8YgPHK'Bk@"'t#%EUe"eD*)H
%V356:,K]o+hT39t&]pu(REQ&9[92"_bhgG-AS:kN5U1q:N,G$L"%6<_P<<cM!=Bf_M7fZu,Bha^kF%;QMdurV`XI[_(F0pp9(]0$
%;/P7^=t9G<&@AWl$)JJL;FZg>V(*_r*0O]`pe25&kke0_'\\)$S'Wlf1iQYL\b@_9?W[AI+X0PmcKQ2JD])6E*.qpi#mDL[,><A_
%JFqSH91r>]PZYis>Bo$Zf>'gMk]S+#T^gQJ29<f=$PXYB0R#,(,-o.CfX"uc4a<r],:e*eVA7!hY^Jq(aFeo`TR?h'aS&gG0e:oA
%24nC;%<lWFOJAo)as2=f^(sp^'[)h1^kJ'8MYAM#c1_U2TL)*,>mjYg9)bIs@Ig-/$?iR.[&E@?dTVAe&KB,s9do3q8?<$t@8.Z`
%Pb:-p^fs%sUe0OM75+AJ&"7#HiAaqjM'6=*Y_Xu(TPqc!EjE:ba?F-8`%W_Q`LnZi+SGuX5EmH]Q-^f9K6(rrgB5r&@"LZkE2A6B
%ojV)00p:'XTjoLo#n4*IB>)p8SF@S=Js8u+X2H7%(D)<AKk<QJo.?O@p/SO&>i:#C,6M`uUO=;tCGC?,(P^eO#r"":$tFCj_'f\a
%R2o]/JB/l;0F?,?]l#Y>"p,D<Bb;tMp(]'@*J;FTC<".46nh-8YMj^^6qs5.q(-kNoYi3A8JY][Z@_FNjAn6kIn6j##TYZCCGnXO
%<'6=q,c4H.!+HR.`-%/[@Z?@7crcSI!DViLoQZiGcAIhD5SALlgt.(tfen;E2e)Kk:2L94_L#D&E'EL=C=X?/(NteB$j1FOk5*j:
%r"06]TrF0r]js$2!X#/nSL2$2(`\'f$'<Q1ZO-uIh';4c%Zj[N7Q==9[6nWS61,kqNb/mCZm]PVd[2ZSeK.oQ6'4b?H1ZW+K$;]c
%d")4HiATB/+:te!c&bgt:*X1"`0:LWW@.&@!(8_*11\H'RM.Dj#K4tPXNb2#&\[H7`8cN)U,8)0TR_Tu^1c!V8#'KaMI!A^#4`$7
%e%!?/6u%Yhp%>PE]FKaN"651l5F6qP@K9XnJb@l-Xtj^XegT)qk<O=;4@*m7VB&R9_.`rn.QT,7)T)3=Lii_(&XekJB1<n_!3f7-
%FDpuF8RXa/]G:e`XD\B#6UO`FSIUJ2#h4E\(-osl_8m=Ub%?'WW?We:/>]j.U_2Ua6g3D_nk(Lo-r;lXR'dtGHHhV:7_k@<&6VW/
%WV@l`M#d_F<01MKGWeC^Si$k/*Y?*TN7'M'gtY/,.#%/:KTW`XrbRT,&qc!b0jW:NGTX=W"$jFc#^%>F%tO%(q;`")TZq")f.I,V
%L4BrfVo]_E0J*P=L+pNYbQ8,g3s6]&`#[]pN4oA76@jYtR4'*Xj>U[.HK=H"@Ce$5!Ma6,\f\OjP?,%C*7P<d**WoDj;?$Id`F;/
%_oG.V4/=.@B^K4t5_+fG-D^\V]b</_8JM4e&^dGO"0Hf[&-W5f%"nlnKFn7S*GQ`#+PqXoG(b@f,X>1c^s:kJ0Ol@nYW$T0,@g?h
%YK<I:+qPqN^'^*\*.ucb)6e:Y4cT&CaoPldGr(E.M4-^DDSROS25fG$[g9:If8.2/TaDAF%SS+9+IIge#\`9N*RYJ<'>%Gb!Y5ZB
%eVQ2Y&-UI(`p/?[%M\ZYhh"8sM:bjRQE]X)"MS9,R2(H57pr*V@RqmK`(-S%@7>G'k<-85`&$\[A8Rq1"\p3@`Wm/=@.NrWW,0_g
%1>W4+f+"^2_Bo7O0@E<Bah8;[1s7?k<lGIII@7n#E(YCm1YLG$k:&oIUlWOC9K:J<XL6FjN^Tq1^LWW57'qi@YbX41MO_PI*Zb@P
%R!DT<,3A).SchmV_hKTHZ-HFJ,Qr9ZbEV4_d?h_7,54ru1fUWrXL^#3QB`uJMABXDPp/b-oZ%8>@b@VW^2bN(iqL<TKOfOA8fW@i
%1_["p:_r.?>j2hRZC+^>o]6W;MNo]s9P0YrY/D58'puP[Md8B4`4Y/'TZLC"dOJ<2kAGC,.fkL`]?6DW\3k_RiCYcs)1D+nQ'dqr
%Vp(F?6U#^M'<WUB7%1ZLO9++)\["OO=#Mbo8cV3@)AE3=NSJP#JM\ki<t\nTE[b&kd#BT*X'FmNkku&C<s$gf:=!1e-;;Q?>R;<'
%PYIPrJX[5u7:s\Z5!,6D^;Q6g`F6h4nF+2X%d?HXbVf/jXUMJ9,'>dQ*_kanXJ%rT';NWL=`u,4==niLa^S*T!/$Bd,[d3h26Dk2
%kT)P9M>TTG"?St*Vbq5G*5,s8/VsPY`#:=?JQ9^6Rec)u^"00-%0MSnIDA`6f;C149]%;H"gunV@&FTb4K,Or4WmUT%FCh&CmaKB
%>=-F@Yg^Al]<tqm.QWN_$h;(WaW`J-PJ2Q3-sp.\c2`#"^gP5`I@[o9VO5Ghhl/l:mh+[bia83f#`7,ooV@R6E?j2=oXQ-U#<H+^
%N@lKsO[fGjZ#%^$I0?GsMfOHuN_h.dCXm94BjpJ!?"&k!aI=A5=&Pkf7L8'/AGZqe[S4e]RX8)mJJkeUP;/)SCBQI-$oYIY>mI+]
%?(`Cc&4E/K=Af`C@#*Zt>0P]_E#JhpFgqiO(9M0$F(sd1iKtBO4V^4D?3-@+Q(IQj2j_"B=`T^+6jFpR%F]T]P[H]WC\1j8_GiHf
%;)#n<$!'S.H:fD^THGWkB$k^3=i8buVuT".4CjgFb`._G0X:#C5hb0(Yfs-><+`kT^mU-;V07ppE[;'s!m<Y]N)de@![i9f/#5I/
%"X[4"N\\'/E",Zhnb"bO<LVU>d_59P!:>"7=Jf)Eatqp[hJ-ZE%8ic#lA:fT^nDYXbWlFQ7V'^92iron#+1M*FJ\bM"tW09g=D%V
%&ZYVrDu1uFG.7T)ZRS,'R;X]s,B*sE5eI^A-`BZ(6s<nE-OTYajGQM=Ef2>bJ5A['QjJ^pacIl@BqW,2C.t..P]<Eo$Z:^?_@P?M
%6;\oq'^1a>:^3\I?SH.`5)IR)d)q75C"4c@7u.R&;;(B?)d,!p?q>/r<RE!(<?ko=*Jt\Q@Y*c55WB5rVF-.Tq9C],)Il']b20GX
%CG8BGa@\M)QO"I*T172cTS=]:EC?[l;(+jH%rTA%SGEeFdY]TuPpWfHA?cTc[uO"e5]7m'4[@/b7*^.ed5?Z/FBc0c&HLts,D)sm
%%q<-\`i6oLC>pE>M7Bfu`snRX#TY*Y=r>[JkVGV'O].usD>?+2#0dos_G1Z9-3hqnN&*o+7RR=j:E!5Im=T@Pa3G3lHT86L!%.7>
%5]cQ2gM+Or*FZIDe\F1GFdlG@+'K&ERuMD4$i.iSIu"2`BkclS44Z7"#ppe6%K2HK0S^;T_7>G%`%&`p#SY]L./JM.,mnXD<:3F,
%+pUcY,8Aq[R`J-1LEs9moYmpO&@sB&lTir%F3TQQ0jk#o2F-KAVB[_o%`5+Oo\V_WVo3=;keNoDG@\/"l-U3MLW$VeXr5XhYrh+\
%qi$t=74JZW7`H)BTI$$nTA4]=>lt./-p?s"f@+O7#AE32$&h[Ol:aVJ@jkgM-HAN9DL3Xp$Ns3A+jGXYD0dOkErV6*WqGp&?sHm@
%I5=llE]@$_(PL5_&]S6^1Us#fgs+,04@J4(ff]U!Dc9p\2g@t6S]s^(-I7YB?+*Z?Z#9;>I7p7SE7'IiFRi(OA:9/hPjM=s_*g8C
%J6AY1MMJW24\<^5KE@NQ7W-5EgsG4FL<G`-NtNc(A^iZS$oTQQ$ViLZ'kU$OcpF)8-V9$OdkPNuN#%\Rr!qCge7Rp4+J_+bR?67K
%mjIiV1+\':%MCe'4_H/H)Bl]Q?hMR_[SJ(PLIsn_EZRA\JEgRkG_]3h#_o'g1K%6WF`3*tX/?2)TYVHNikB.l7*QL`"D;<Y\3L3%
%XW#-Y1<MIJBJh[R_WW"5C99P%KZ%3Q7%@*]9Jke.OB"dP27]0B`KE0"^RCi$2,D"Zc6ks%FFo%F)%na38(XN]P,ZS\-oj/Raja]n
%43LlM>(Q8lm7pua"%RKOQu%LEiJlRMC!.V_@L/iK.jUai]@hVp?H=K38MVd\F"/4c+LQ$DDTo0Q8ahik*03]hod7P,gub<)L:lH;
%;",/K'V09mpC3h-&V\9CPb+QrkbK!"8*l6l.'*FQ__>!36-qt-Fr*W#Y%#I'o--S0#D9AE=9'3G.u]IZ7UVlCs#0:(NA_a*q*j[9
%B/P6OEV(G!;sG)>%L!#DI%_I:dh&aj$qqW(q2s4m1)No4n79J!Q<u=.KF6^k]l]ob$YnIjpNo^Em6O^&$3LPg0mDYSVEQ-[)tbJt
%8sKu)L30`RE\==L;5&NEF<1(K*VAhncO(chHJF;g]gGJQ,A.MP?hP$U$;mKQ<-rl-*-:tGLCJSAU^67eQ3U(pNG+c41+=t=F_!-k
%R0N?L]h>4",iFc1o-nmY$mK6/j#ALQ,;FIscOf@+@2+[69O8c^iYn[+#;pJZX2B8f;!-roN9C>]iHttU@NQ.*""&K43D"+Ji&Ran
%bp5?.jcM\om&Le8Udm+Q#YnY-VkFV$U\[Dfk`MOYREgptB_YLH8cTFI"[cQ]qB=n=L+'!P!B$YT"[-=?ehW^gWuNtI1Z==P3^S:7
%7^2cKOCJFg&P-LadL\5U^"/AK'#em%D_T[L,@D1Q7GEQi2s,s-8f5F>PS'c41O6iC1(>h5J2gscZo>3,ePO3;d@SX[@%K0,kpFIf
%$&4CNTYVFa'XAN02Bp(l^6%\ii<4!P*99FP-A$f!0YYSqNEYQ#;]%bX+]T&4hKRXZ"b\0=*BAjdK%GB*atah1K%Db5@4Q.5#;*!/
%2%bsNB-@8FM'6VG1(8fpI\iO48ruZiX'<S'>mNa031)K3*[]s&Lf%/s.#L=S4Q'&>*iNI<U^W('+qCY`/*(n+BnJ(WTKLMeYnD28
%=s3c0.8NYUk!1&uH!UYpG=6bo.[!X!#d2Tg]quGPm'.`0YTHh*Wusf]CNP[fEhj?N:H`DTJjXA.Vn*I26NB4uRN_J<Zm2=i@>^oU
%l.h9YR<C-;\QGC=9OTLi7>r!UYpF1d,78$&T`QgGH&t9aK`n+\L'i%$&!>OI,d6/&<IiQi<fF7/(f-X@Yc.MNYB.o^LWbdLV++<]
%D&.`#Q>9P*dLKB1H!7&F1@qUOY3&d@7bJ?(j7+?2b)!V_asJ*b,4,G"4Ng*N=\p]M-Q>V'>Y#3K-(r_NI8*d41Pj;3$*qu'"4D;?
%%&^pNCq?X.B#G&#'<>F#a`";$2UI29C)88)JM98`Ntif8&sbQo/2WHGX:!02X^,MNf+Atmn>sn+TkT8NG_at=XpUsFYlaO88loTp
%>AIKg/\I(P_7W-YUa6P;@DFfP5R.3rbSD`dOG^+DQuLc$Q13Xh=NQ3g01_Zkbn.5M6ISqg1a?%/SlkA0:O[)=)qLMI=@"!2[*7gH
%CJCX()WCSq"XjL_7(C$!a2/gBT5n;;Y_LsGkdO\X2ejf6<7konbo&^fK@$i?ERkWA*u%MU/",S!KtC%.DU5AC\`&hXPQsRPO%'^_
%J7I%'Y>hL+4)@dd8=i1u+a%3BT.pt:gd"Jaf;\o=/Imo;=M`uF6*UJ^oshYc!QK]PdBY,*G)sXU(QfLoi,m&U'Q$+gM`7^Y=.FMX
%8bE'TatCR[Ja^P"8m^ajBah4i4oC4_6V,bg*V;\hJXsat&es<oq?LW^4(UQLN?PV6Q#!]a:1!\9Z:^@O_?OSk38tq$d':BAhE#[Q
%Q8-IFJ4,XJ;/H#,S-@]!r!ESV_Qnsj5qVH=);*HPj7-Y"l-(q+h''#W:)*5d%VK_&H5Ph_es82"M?[&5D@O8uPU_t>KJ2@O"_El0
%2.DB9`J*=i"WS4I(k^cd;(be/9%OVC$8([[Pk.Re-4sAOXN)i%"J+E0kY4]e!/dF'PpdNdZR/YgA\\e!:n_gIh(g[*_CKb(:hV;<
%\(8U1F9do[.a70%B#n0s/Ae/_CKk5F6s.hPegS\ciM[""\h&l)TY:S@YFJQ31sgQG@0#-[3%.'I#)XP"L&9V7)\AM%5pr9'mkb=!
%f`W:iArdd/JoBC/L'234jCp%sD!iB2*`[f;%Z'WD#[BGk4i(?g!s>og\1/Z*(q-M5*jsf@**d!N5&VNr$M.VMK=Bsifpn.m`8(W`
%+BfhW'7;V(2WDFXYgJhUlp9DIhOA)E=&@`p7[cCI'5ImUK=-dK-mXNV%&#qmh(fhd`,_cG@Z`.UZ%Oomp9;ulU/ip63hh90#LU>&
%9]nYJ7:aase!Wd0fi0s=6;JmL?B[2]7AU9IC5!lX.-_$6<-o9ViZE!3+d-*tLh9fk0VjVl^rnaRluBuMHo=[9%'T`i:k1<?HjI9%
%@?b:hHF8n"LQ#E7BAk:RGYWo%9aO3YBS4*SLu\c)h\c#h@@26s+W\>%n.s^q[%Zn4BWR+a/Kl,ZK$k_Pfa!VJ_gp]_+s5,WD^'Zg
%6P)9IL-g2+HYE`h_'Hk4=F3FsJKAtUPaonf/Bu[H^kkCHZ3#f^P]YQb9';D]d;B/?!A#cRHc?Tu[jUVpA7%+>lLp.C:7RK/"NLc+
%b^r:%p(J`PA34+4i@7FGd-dhP'A5Wg,@/_1(CT:84=W/n8]6F1Ti6]^d(Uf=jF9iW^/@*l7%?PT$mq-^*C.M,cpP00$_&lC87@lg
%OkBo>U#fAV=US4H)\7+JM%o+07f?rS%>b^bIng+qlZfTPpCm7R_+dl73V&E:<m_f0U[eTm8#%R\$-#r>KQnd-R9VrA`i>0:T^:fk
%>2t2#^Xd\B:;^8el7I\s!=$+'N5\]H=,>DTo9F(I!p!Vk\KBLR<hIsJ&gS2ILt-:qAjR97_QNhoO?-VIQ<BKUb02eG[n<\jUpP2"
%%Z%'!XbQ$#D?U=GN.q-=eT;DbX=Y^/UjXa)/-F1r?&a\1lA,b0][DV:5FQ2:(1T4-'hC,i$e1$`Y4CY_f!m2b(4'6]!c_YAGSt9.
%>6JuY!$2!#h??5J4kN#i(2Yh\:k2l5V_h\)XXnB[oX37t8=+0Nc+I*N2-gqf4(85VM3Y6dj>Y\XfBuT1187"Cd4FBG#+SsO5VBn#
%_DGGi?3+(QcRS=M!aSE+e=N12MDPD^86u<H7%7eKU:'57"5<9#/5N9f;s(d(4C'kk'TAlO85[YoK:(Q;5[QD`"`,OX;ofMJ?E4,r
%at9'2L/amMLJ*^C58_C>QB[h\l43!+b+J''%5:MUoM_X#\[o._<3lbn70KReTRi;KTV2?g-7Re%rIg9t[M@/i[D1/1'S`rhR!e:6
%j:TCD1^0u1@Ue2g2@A_[2#S+Z4'DZN3L-2YZo;&fEGa\"3^tftXr:<1n>6PSQ(oRPR]&fA$Ltd/a_+j+T[>6Lg(c,*(#(cW![P-e
%![]imkpi\iC-NH]$s.t%<k5+ho?@G>F?:3+1X6>)R*j/&^C2Z\A/V7'%:EQe98dXd3!??$:;+SF$rR='OG(%`<s^_.JgTAj:Bf+(
%<a]K2V5#g3c,HMJj6.Br#@c`XhA7$f*GVGY&.islGr7l->):Qkf1I,95c1]"<u/7+W&Je^L`*MH^e)=ud\b]j??be:Kp30"0Mecl
%<@5Jg`jBp<jeEO:^EF=WTEH,HP^tCci8a<$GZ(;'E+stU"V:uReO"2cEdG[4))4EX=oa6aCMG@@+_BRppJ`<\J/+I7<I-,nhcsSf
%@m&YK6BNVsY4^Q^YB26Z=Lb.nSi5UXYR9VpKWil::;A$pdG!-L7oJW&$*_iLnB>e!b%Qa7l)?r%!=Q-UX)qA(^9PP.Enjn#B82-]
%']l`K_QZ'W#_'!!i5%5e[&]:N,nb=R)OR,(aSj%VZs<o0OHn*VD3NBV\SWD;.NPpY4C!T*8X5mi`&Cba#sIMB@gGkbVQLZ4AJuH-
%o-&i\b+qsB'd@I.Fo*,N;^8"#b%X:U*Dccabj1OY[?8pBKU[DtU`HT<bH+<3A`fHib]H%GC9[%BV;m3@K!;gZ?+M'r&A#dh,UGFl
%E#FHc36k[YY':)Gf9:tN@YUt+)U+:%c,;Z@CK\9lOClE8QmPkGb*1^hj/P,t4D5%uFe.+?@Ju##o=AUg89*)RPnogG:E"J7#jWI;
%V8=O3!H<I;_;h`]qV28P;54kbg>`)b-@N&)TSU'<iV5<pk&B/Zc9C2F/dAZ`@=9[Z20;2L5hi=o%Uep#Nr%&eh1rWY_(d<rZl*1e
%gSNo'HlF@!*T9:AS4hCo(^cc*+E=U*,"/hP.5r=W=u1sb9L>CFLWI$_("b=t9mqZ(-lca8]kM4/,87lRS3WAbV1C]m:tNLngN6Yn
%MkeVK6Y"&#G$K\$-NuF2,/uqLKE2;L&/2]W"kja<'qd9R:feUO!94me@X=Z)7$/M9Q@!LD\kXo(-9P9:i0a$8b5qZM=:$8H0L0m/
%RWn#'@E/a+Gp-YX3TtSJJ721n:*$^3hBmkrGPM5b3j=2dAf.k*hnl*%1uh<84DW5mD.f)&OrnK3_F5Hc8PV[B(PH3XT#$%0U_04h
%1ajM%]T\O>!'jXf"r]n6W4,r"K"G8;4UcYP)t_o/`6A/^iSi?_7btLerbRT,d`F)*(ul)Z^hLbo.o=\\3:@RjCJl%LZ`24N#r91[
%"pOarhCf32UiAU=@#RB=n%J%O)+H:[6WlmhWmf]KGp!g#-5?*I1_0R-HH0T:,],FoA2C,pj_$'5oWhocob(7fLQ*8db)/WD&J>:'
%'lO]/W?Bcci(B'goW0uG#)$<%8S5oM$)gDsPjUuRD3[@uKYS-YdD0C3:E!WTJ,lJ*3p6_hnhU$H!!9tFYLI`(^l(I]&N`^+iH?hC
%/L.P4;*1PS8J42OLjIVd1l3nN+KC>]oW1_idWIf5U.LFI"87M;B(i=ldK*%%14\kLE]#>PW4W<=5Saat-j)jbpk'/[KFF841CQX*
%Ed"!D7EJ$/U5':n$/@%a;S3(H'ZTc;Jd1Eo<N"R@Jfm"LMjK6(<3#OU*dLDc_odrN-QSr0(Bs2nmX>5*dO.W43D*ZD"J"?j;kY+s
%+@\?WBYu>J@9t:+M3I(^Qe4X+10>KZ8cYdJlABF"4.B`mI(hUHBea$e)thLE_N7`QaDVcQ7.E!qfI]VQL,O]1$V,O"=9@(!*6J+0
%UW*a='%j%=*m'XsV#)&D;\B`1KI?H.Xn@r,od$sb.o.@g_u&I4ScgUddE7Zo2mLl3j[fNc3+5CqoX`hrP"]2)I],Bn1U:5V"HXuf
%>Fn5Pb9OfmGnR"C^f$'6PH_D3R;[?`/#DK-\^I@dO33`,UPE`SZ6]j7GqF#E9;"4a?C<As&(aUf;VZ,<=h#+!:YA^W&hY&\h3KJj
%j$cIl.1%`AM+sDD!*Z79J;G]U)-W^?!:',YQD@U'ZsI?96MeM6Q;km:][j;4J5klh-/ii5<!a>+A/eR:1cu)]oT2e$-[@qlfWsQR
%Q^uC+hQ%QCm#>a7hFPS@'Q=eP[<U+t:TRLJ7C@;`<^.eW@]cX[Ag+jb@e;Qra!22+%4)$\5)MI%]?#psccEHX)g;WEiJcViMFqpl
%#Ej>s(cSP#0EfndqK/7ZOJ"ZmX#LQhjq`bCBbNKC(cWWGUSkFg>c'mJTqTa4ERG:T-fT4YDSTjQ#ng@EZ$O);-QUQaouSD61YkJ$
%d>YVbhV-duXb%`3SgNs>Qp0`9ThK3](!'Pr?:+hTLWtnu5b9e$jWqolKldkF5T6+tZH8ID7:A-Y7L)P2#+8ZJUlAXDK/D5^aTFT+
%($=8+G[q['jC:JQ4paFf9ok-[d^90:]F-e:GDj!q1g>Sj^?gejD66Gc,[;UTbD8F[b[GD<i7[aKD=Dh3Z3S=AX@>p(&L^Epn.L&J
%!n=N9)E6Hf`PG..oQha:MQdQ6.__A;Eu0r4!N+I0J:_JRVY^@=!"$Ya:NJRmHfQ@6=k_-Pjld.hM1<fiHWW=M8$YV>Ki\QbVim70
%)VuCN2oe1p%WTu7k$Xg+_]u=bKp?P#ocS1(9Xma!2mR2?a8Fe`618+_"c40_nngjY<rkdgpUfH\1Vnh/KpD;e<dJHu;%"KUp@R&]
%`s6<mkWO`sRR&L/k8JtZfr&asi-H@Q,k,`dp'Kd<bR*Jqh'SLTQoc=EWsp1IggO+Glkt5p!=&.*<:;-c+l/kVd[C0;ca[@P#*8kZ
%#/aLoNS4RQ7%>],7?sg\e4%)uUf2DoHd`f_`HXM_LMM6>M6YL0crm]0>C(S=:2Cc;U+go*0B=0l$g2ZZ\4i7mZI2rqF^6`#Jd3RG
%X4+'K]VfH460Y=lH,LENTa3n(NF>[`1B)RP,Yh)Fe?uQTL8aM^N>p_iNXa4!,;WK6:%;k;Cli":1o(`s"HO+`^K0:N8%f!d5Vru8
%%R]^nrFA1C@E-QR.IGCSks14/aPn\`LM*E\K#Bh0o)iD=eSjp)r>bn/lln#!>Rs/W\+u!aI)St0#S/-gkoL[HL<Ssj!TX\i\8L%U
%:>jYIjZAd0:JHGt^&]>eLqp7Q*L<mN(?4Qs2.g5p-6Vp!<!K,3@#ZaDmugcXh>tHP&l]'W8H=UhG8EC[nj4SX#!a:Z-b[l_=%Es[
%GLE-h'!D;1gCNP+FnU5_c,.-c8f&X[0315l.g,r@ja]$\DYRNsUCZqO,A2m@I6WY=9L&(%F'>+Ua<k0qhBtGL`PQ9P`cEWdEDY-+
%nARG`nd.+Z7UIc[GmcO6^*E<1H93V0$2=-)K%hm)'b.t\M!6Vc.Qs[pQ\g(=]Oenk0E.c>^h]Z%'22f+?T8(o7#2f4=GA7q!&+Bg
%A6i;`Nb@NT1"c,U-ChC#)^r^Je#4,HOf[W,K2Gr^"X&He^eOn$OQ0`%DY)T8*!>=>)B$4o\n+Qm9bo`8`WUg)1C@VYmdM.X$"H;G
%i2Bpm9N4T;`2^tI\0[QN@kD1gDGj&;`WX4X'PGDg`1&_t9H5E]a$2@,%gP/ME$d4JE,Ngdj<'9/L,3hNL)9*_S;A2T<STO'aTFN:
%D`ACAA\$$QJE3%J(!^>)QPl]k$!O]4c'^A-_Rqh1iCm&pEXNQ+7//%>2p.PNmU<&a8Hj[OQn;q`lRo]iRT,iL,::tecH/F*CEedp
%,4isGMuZ\RA_%j'ekAe?F/01O)qG.f++7_F!bb`C!]+VdLqGMQOoQ(3&uVf;TF\bFc-bbP?OCSC.W"`sb*k:c`#@UOR\Nnu<R+!r
%T&J@W1\h*QTl2n([rZ==+E?O%Z^o?\@",!c6?4@=jH!R3)^Ta(,c9quY+QE5VuEQd@2]Je"(O0'EMh>#pGc*m[A#(-D`+g<kjme3
%4J&9E4I)i7'H2^'UY0;Uin$K<5@i)jn(K$U=iP1\KUc&p]6*n@mieBeLC.>8-UKkm2@$YZWbT^"MHBYJfm]ge$/oZB$nllkE09Z/
%=L_jert'BJopO>Ck-MFS"QJi;T6s=t6r6[)j71t1%-[8qk'/hHC6%qX!:JXX=##@JD=i."Yi/Gf^$(;<X5\^aGG?VD&OSaQ;F1(;
%37S>_CE5H)T,Kp@%gZ2XF^[c0"HmdTrcopb9]'X&3[P%J(p?@\4=uNdH'M*3';,#1%%V8@$b6SK6%uu?PNJ9ri.fiP:Vpf$l'NXs
%YS>oDRbJ7(GoS@G&Km7T\,6ts/,A-27(ENMM7"khoW%Y`k7KM'egfSB3]>5Zd>IurmA`G*&M#P2XE7Gh^U;)3gqkEl21j/i'-F"+
%KQaJ93oV/."UGcJW6_`KPuj\:OJ%@iP3nllknmgWQ-fqlB#Fi2*6#-@d%IdLYA[?V\gieR`!X^%X'Oi/Dln":pJRc.[^7=kICkqb
%[LP;j?B/?rcp0(d.PTniG*VT(7r676?Xj;;.ErDdL"fV>.Zehl$Hs/6?'WNMX`65-nB"=_>gaZ&Gqa*6-TVpfG3P1^JqXD,OjsI'
%.FHjL_L"(J,nCFcFg5f7VpoSNW^*!b.kjc#Fu@i0a%b0qRat9P?dSD7L]Rug#XU0p!ZOIEI'YRj4\[uK<3uR1?WY23m"'ZO2nnqh
%V$Y_Mb?[<1(I>qNcf14YGg>mID([-HdV\1t;/lmGcD,;RXaR<Ke/.B/*"__4f.E).l]:nZ^sMBbHrf.f;\sh^"!AQi=7>a$9Pc]3
%"BTo[^W!5p=FcIZ%pk/KiW^gdb--S"&7%PGRBJTe2$soY.(+^QBRN(dKDQ@%4V>F!+U-1/I6sJo$DB5&6n]N5lf5DC1$J;bke?BX
%W[""Y!:\?%EpmsOdK!JPB9eRJJu1Jk'=^/]IP6ZR#i\/^etmT\N!u&:qhECaUsfFl"X#ll;mP_S)u5Zg1VMY:hC?gYl$I@RV\V`(
%6!CtVGRu>%Np!<=pHs6gCRkG4'`;@:dff&!6m9`g5k+qCq.7N-l[_#h].lJ72TBA/E-4_l9s_n:'(@S@"l;i_*%[M20YY&Ik'=rq
%h?:^]='O27V$B3!22;lt[k@/UV4!,JN"DWB7&DgA/L&Pq,Roch%Qo`5a;3Aq&)b5sgbN2eAM.@u'S/-5QSQ4F_rQ##>+"gU16Og9
%=,]o?0eios?LrgPN*]k7chCLERV0<B+Hg/'b<*"b'F5]NN<Y\=]jSL,W;/LpMd^K0#\6U4;]69H#G5D:^R:*$Y-mI\$]2MMVL:#X
%A5)E]oaQ0?6(*6-X+Qnce+/+ckj*7S.6Lq)(2S7@5*);c?%K6<r=!9/+AbOs:S4%src03@cK58ZjMaTiUu6HldIU$?1NN3%W6Zh]
%(,$E]a^uNN!CZT-3!jVKV*:ql;Z$)u89?.gUBcaFCu[U9SC)t']VUEgkqr>Cn]+O0]'PYWLkW/B$?9O"aZ'FGP418U'+aO=isUTD
%^k=Z)Ga6c@=oeZ%0.DS9R,:\s47sH$nQrCO`!P[q+&p"q4679>9DNs]ZOs@Vku@_iWgW<1,)u2%%,Y,#i?R;ujD]NKqH>+`$%&71
%@[730?BkToj,%f8`ga8iM=asR9SupO!PqH9ZBu"QHidk]8kbgC*gKd)jNl>!:g7JKX%&7V1*kjN2$k4h?d2D7I^)b]c"'-e]OQI>
%UiMO+*gd3,d\,Z!(lcea?seg3FEIV/[?2MOcATW!L,AeVliga#K_P>-/H`pG6Bnqo68'@\Y.N$P%(V$.JoKuE?KHc*@mX(s%Akj1
%ms-BHd/tXK?56:-#)O($=O^4anccZTWt:rg4$?>;BGAU><JqMgL6]l4\3f^F*m5uHY35u4Q3m$LFUhYtAhdQfV+36r)kuU+=2%J?
%'pm_GltTsD>l&tEH=d"+b\nD:N1UtN.*8e'f.+PcBELD;`N09oqkSILqg3_nccA`a%E`2m]n)T/1)?>h`-kI.d?ENAh):.d&CZe)
%:]R+,SZ/F:o12!Gb1AYIB[!AqHSc3(;W2rTK>E+<38u?QjNFY:($2KOH$(!bLr3uoq$In<gV6W*;=D*%l&?F^(Kaamj\WV]V)_k#
%[,cXo9ZH(WS1K\]>%.1i8MTF+e;Nl3AX<s`WnUK$0^?JpP`"U*+,#1d&jfn7QXF$nM@9iR?(]Erj&5W=mZb$1d)Qpmbob6s]>?/+
%Me;%44_AL)asX6T-Y9TL8Mh-$j%:sq-GH2]d5TQ7,A9Dd)g[Lgj/b,eB]uQo2a',7iKL2IKW"-+IGn0,ia+[RM0XetcpOZ=&<V**
%f(JR=r3RfB#=_^]^)[cjP1N3-c22n8/^kB>W/BRpB9Z<4TJuDFiphHf]s'W5%`TcpQ)D&11JM2nqYC70>k5!#oQY;D<at$F!sYiG
%WnrM1g<;K<FuXM*E)ZY4DhZ"bFK"37[dp":n<KTrk%Rc`rYDDGi'fU[0#%,:iidj"rr23YZd1g"r?hG]IWP$oq-e^Ojd-&Dr4D(F
%oq1Z=QWNMMB:lkc=MA,qQ8^b3O3>T:SU@hiHbY#S]Y.Z**e(^!)^'C(4Ri10kMO"$p=]HM,dbRn~>
%AI9_PrivateDataEnd
